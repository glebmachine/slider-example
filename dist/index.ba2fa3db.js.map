{"mappings":"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+B,CAAE,CAAyB,M,E,E,E,EFP1D,EAAS,EAAY,EAAG,E,OAAxB,E,I,CAAS,E,K,EAAY,E,K,EAAG,E,W,I,E,O,A,E,I,C,S,C,E,O,E,O,K,E,E,K,K,C,E,E,E,G,EEQtB,EAAA,AF2HrB,SAAuB,CAAC,EAC3B,GAAI,CAAC,OAAO,cAAe,MAAM,AAAI,UAAU,wCAC/C,IAAiC,EAA7B,EAAI,CAAC,CAAC,OAAO,cAAc,CAC/B,OAAO,EAAI,EAAE,KAAK,GAAM,CAAA,EAAqC,EAAS,GAA2B,EAAI,CAAC,EAAG,EAAK,QAAS,EAAK,SAAU,EAAK,UAAW,CAAC,CAAC,OAAO,cAAc,CAAG,WAAc,OAAO,IAAI,AAAE,EAAG,CAAA,EAC9M,SAAS,EAAK,CAAC,EAAI,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,EAAI,SAAU,CAAC,EAAI,OAAO,IAAI,QAAQ,SAAU,CAAO,CAAE,CAAM,GAAiB,AAC9G,SAAgB,CAAO,CAAE,CAAM,CAAE,CAAC,CAAE,CAAC,EAAI,QAAQ,QAAQ,GAAG,KAAK,SAAS,CAAC,EAAI,EAAQ,CAAE,MAAO,EAAG,KAAM,CAAE,EAAI,EAAG,EAAS,EADN,EAAS,EAAQ,AAArC,CAAA,EAAI,CAAC,CAAC,EAAE,CAAC,EAAA,EAA8B,KAAM,EAAE,MAAQ,EAAI,CAAG,CAEnK,EEjI4B,G,E,M,C,M,E,M,C,E,E,O,A,M,E,G,A,C,E,E,M,E,K,M,C,E,E,CAIxB,GAJe,EAAK,EAAA,MACpB,EAAW,KAAK,GAGZ,EAAW,OACb,MAAA,CAAA,EAAA,A,C,E,M,C,M,E,M,C,E,E,A,M,E,M,C,E,G,A,M,E,O,E,C,M,E,M,E,C,E,G,A,M,E,G,E,K,K,C,G,E,G,E,C,C,G,C,E,M,C,E,E,M,C,E,M,C,E,E,C,M,C,E,E,K,G,A,M,E,E,O,E,M,C,M,E,M,C,E,G,A,M,E,G,E,M,E,M,M,C,E,A,M,G,M,C,E,A,M,G,OAGJ,EAAW,W,C,E,A,C,E,EFdF,GAAK,CAAA,GAAM,CAAA,EAAI,OAAA,CAAM,EAAI,SAAU,CAAO,CAAE,CAAM,EACrD,SAAS,EAAU,CAAK,EAAI,GAAI,CAAE,EAAK,EAAU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","sources":["<anon>","src/index.ts","node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js","node_modules/rxjs/src/internal/observable/fromEvent.ts","node_modules/tslib/tslib.es6.js","node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js","node_modules/rxjs/src/internal/observable/innerFrom.ts","node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js","node_modules/rxjs/src/internal/util/isArrayLike.ts","node_modules/rxjs/dist/esm5/internal/util/isPromise.js","node_modules/rxjs/src/internal/util/isPromise.ts","node_modules/rxjs/dist/esm5/internal/util/isFunction.js","node_modules/rxjs/src/internal/util/isFunction.ts","node_modules/rxjs/dist/esm5/internal/Observable.js","node_modules/rxjs/src/internal/Observable.ts","node_modules/rxjs/dist/esm5/internal/Subscriber.js","node_modules/rxjs/src/internal/Subscriber.ts","node_modules/rxjs/dist/esm5/internal/Subscription.js","node_modules/rxjs/src/internal/Subscription.ts","node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js","node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js","node_modules/rxjs/src/internal/util/createErrorClass.ts","node_modules/rxjs/dist/esm5/internal/util/arrRemove.js","node_modules/rxjs/src/internal/util/arrRemove.ts","node_modules/rxjs/dist/esm5/internal/config.js","node_modules/rxjs/src/internal/config.ts","node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js","node_modules/rxjs/src/internal/util/reportUnhandledError.ts","node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js","node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts","node_modules/rxjs/dist/esm5/internal/util/noop.js","node_modules/rxjs/src/internal/util/noop.ts","node_modules/rxjs/dist/esm5/internal/NotificationFactories.js","node_modules/rxjs/src/internal/NotificationFactories.ts","node_modules/rxjs/dist/esm5/internal/util/errorContext.js","node_modules/rxjs/src/internal/util/errorContext.ts","node_modules/rxjs/dist/esm5/internal/symbol/observable.js","node_modules/rxjs/src/internal/symbol/observable.ts","node_modules/rxjs/dist/esm5/internal/util/pipe.js","node_modules/rxjs/src/internal/util/pipe.ts","node_modules/rxjs/dist/esm5/internal/util/identity.js","node_modules/rxjs/src/internal/util/identity.ts","node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js","node_modules/rxjs/src/internal/util/isInteropObservable.ts","node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js","node_modules/rxjs/src/internal/util/isAsyncIterable.ts","node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js","node_modules/rxjs/src/internal/util/throwUnobservableError.ts","node_modules/rxjs/dist/esm5/internal/util/isIterable.js","node_modules/rxjs/src/internal/util/isIterable.ts","node_modules/rxjs/dist/esm5/internal/symbol/iterator.js","node_modules/rxjs/src/internal/symbol/iterator.ts","node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js","node_modules/rxjs/src/internal/util/isReadableStreamLike.ts","node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js","node_modules/rxjs/src/internal/operators/mergeMap.ts","node_modules/rxjs/dist/esm5/internal/operators/map.js","node_modules/rxjs/src/internal/operators/map.ts","node_modules/rxjs/dist/esm5/internal/util/lift.js","node_modules/rxjs/src/internal/util/lift.ts","node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js","node_modules/rxjs/src/internal/operators/OperatorSubscriber.ts","node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js","node_modules/rxjs/src/internal/operators/mergeInternals.ts","node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js","node_modules/rxjs/src/internal/util/executeSchedule.ts","node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js","node_modules/rxjs/src/internal/util/mapOneOrManyArgs.ts","node_modules/rxjs/dist/esm5/internal/operators/startWith.js","node_modules/rxjs/src/internal/operators/startWith.ts","node_modules/rxjs/dist/esm5/internal/observable/concat.js","node_modules/rxjs/src/internal/observable/concat.ts","node_modules/rxjs/dist/esm5/internal/operators/concatAll.js","node_modules/rxjs/src/internal/operators/concatAll.ts","node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js","node_modules/rxjs/src/internal/operators/mergeAll.ts","node_modules/rxjs/dist/esm5/internal/util/args.js","node_modules/rxjs/src/internal/util/args.ts","node_modules/rxjs/dist/esm5/internal/util/isScheduler.js","node_modules/rxjs/src/internal/util/isScheduler.ts","node_modules/rxjs/dist/esm5/internal/observable/from.js","node_modules/rxjs/src/internal/observable/from.ts","node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js","node_modules/rxjs/src/internal/scheduled/scheduled.ts","node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js","node_modules/rxjs/src/internal/scheduled/scheduleObservable.ts","node_modules/rxjs/dist/esm5/internal/operators/observeOn.js","node_modules/rxjs/src/internal/operators/observeOn.ts","node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js","node_modules/rxjs/src/internal/operators/subscribeOn.ts","node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js","node_modules/rxjs/src/internal/scheduled/schedulePromise.ts","node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js","node_modules/rxjs/src/internal/scheduled/scheduleArray.ts","node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js","node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts","node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js","node_modules/rxjs/src/internal/scheduled/scheduleAsyncIterable.ts","node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js","node_modules/rxjs/src/internal/scheduled/scheduleReadableStreamLike.ts","node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js","node_modules/rxjs/src/internal/operators/withLatestFrom.ts","node_modules/rxjs/dist/esm5/internal/operators/switchMap.js","node_modules/rxjs/src/internal/operators/switchMap.ts","node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js","node_modules/rxjs/src/internal/operators/takeUntil.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var $5c96a02c592fcff1$var$extendStatics = function(d, b) {\n    $5c96a02c592fcff1$var$extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return $5c96a02c592fcff1$var$extendStatics(d, b);\n};\nfunction $5c96a02c592fcff1$export$a8ba968b8961cb8a(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    $5c96a02c592fcff1$var$extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar $5c96a02c592fcff1$export$18ce0697a983be9b = function() {\n    $5c96a02c592fcff1$export$18ce0697a983be9b = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return $5c96a02c592fcff1$export$18ce0697a983be9b.apply(this, arguments);\n};\nfunction $5c96a02c592fcff1$export$3c9a16f847548506(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") {\n        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction $5c96a02c592fcff1$export$29e00dfd3077644b(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction $5c96a02c592fcff1$export$d5ad3fd78186038f(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction $5c96a02c592fcff1$export$3a84e1ae4e97e9b0(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) {\n        if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n        return f;\n    }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for(var i = decorators.length - 1; i >= 0; i--){\n        var context = {};\n        for(var p in contextIn)context[p] = p === \"access\" ? {} : contextIn[p];\n        for(var p in contextIn.access)context.access[p] = contextIn.access[p];\n        context.addInitializer = function(f) {\n            if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n            extraInitializers.push(accept(f || null));\n        };\n        var result = (0, decorators[i])(kind === \"accessor\" ? {\n            get: descriptor.get,\n            set: descriptor.set\n        } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        } else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n}\nfunction $5c96a02c592fcff1$export$d831c04e792af3d(thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    return useValue ? value : void 0;\n}\nfunction $5c96a02c592fcff1$export$6a2a36740a146cb8(x) {\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\n}\nfunction $5c96a02c592fcff1$export$d1a06452d3489bc7(f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", {\n        configurable: true,\n        value: prefix ? \"\".concat(prefix, \" \", name) : name\n    });\n}\nfunction $5c96a02c592fcff1$export$f1db080c865becb9(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction $5c96a02c592fcff1$export$1050f835b63b671e(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction $5c96a02c592fcff1$export$67ebef60e6f28a6(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar $5c96a02c592fcff1$export$45d3717a4c69092e = Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    };\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n};\nfunction $5c96a02c592fcff1$export$f33643c0debef087(m, o) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) $5c96a02c592fcff1$export$45d3717a4c69092e(o, m, p);\n}\nfunction $5c96a02c592fcff1$export$19a8beecd37a4c45(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction $5c96a02c592fcff1$export$8d051b38c9118094(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction $5c96a02c592fcff1$export$afc72e2116322959() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($5c96a02c592fcff1$export$8d051b38c9118094(arguments[i]));\n    return ar;\n}\nfunction $5c96a02c592fcff1$export$6388937ca91ccae8() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\nfunction $5c96a02c592fcff1$export$1216008129fb82ed(to, from, pack) {\n    if (pack || arguments.length === 2) {\n        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction $5c96a02c592fcff1$export$10c90e4f7922046c(v) {\n    return this instanceof $5c96a02c592fcff1$export$10c90e4f7922046c ? (this.v = v, this) : new $5c96a02c592fcff1$export$10c90e4f7922046c(v);\n}\nfunction $5c96a02c592fcff1$export$e427f37a30a4de9b(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof $5c96a02c592fcff1$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction $5c96a02c592fcff1$export$bbd80228419bb833(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: $5c96a02c592fcff1$export$10c90e4f7922046c(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction $5c96a02c592fcff1$export$e3b29a3d6162315f(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof $5c96a02c592fcff1$export$19a8beecd37a4c45 === \"function\" ? $5c96a02c592fcff1$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction $5c96a02c592fcff1$export$4fb47efe1390b86f(cooked, raw) {\n    if (Object.defineProperty) Object.defineProperty(cooked, \"raw\", {\n        value: raw\n    });\n    else cooked.raw = raw;\n    return cooked;\n}\nvar $5c96a02c592fcff1$var$__setModuleDefault = Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n};\nfunction $5c96a02c592fcff1$export$c21735bcef00d192(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) $5c96a02c592fcff1$export$45d3717a4c69092e(result, mod, k);\n    }\n    $5c96a02c592fcff1$var$__setModuleDefault(result, mod);\n    return result;\n}\nfunction $5c96a02c592fcff1$export$da59b14a69baef04(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction $5c96a02c592fcff1$export$d5dcaf168c640c35(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction $5c96a02c592fcff1$export$d40a35129aaff81f(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nfunction $5c96a02c592fcff1$export$81fdc39f203e4e04(state, receiver) {\n    if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\nvar $5c96a02c592fcff1$export$2e2bcd8739ae039 = {\n    __extends: $5c96a02c592fcff1$export$a8ba968b8961cb8a,\n    __assign: $5c96a02c592fcff1$export$18ce0697a983be9b,\n    __rest: $5c96a02c592fcff1$export$3c9a16f847548506,\n    __decorate: $5c96a02c592fcff1$export$29e00dfd3077644b,\n    __param: $5c96a02c592fcff1$export$d5ad3fd78186038f,\n    __metadata: $5c96a02c592fcff1$export$f1db080c865becb9,\n    __awaiter: $5c96a02c592fcff1$export$1050f835b63b671e,\n    __generator: $5c96a02c592fcff1$export$67ebef60e6f28a6,\n    __createBinding: $5c96a02c592fcff1$export$45d3717a4c69092e,\n    __exportStar: $5c96a02c592fcff1$export$f33643c0debef087,\n    __values: $5c96a02c592fcff1$export$19a8beecd37a4c45,\n    __read: $5c96a02c592fcff1$export$8d051b38c9118094,\n    __spread: $5c96a02c592fcff1$export$afc72e2116322959,\n    __spreadArrays: $5c96a02c592fcff1$export$6388937ca91ccae8,\n    __spreadArray: $5c96a02c592fcff1$export$1216008129fb82ed,\n    __await: $5c96a02c592fcff1$export$10c90e4f7922046c,\n    __asyncGenerator: $5c96a02c592fcff1$export$e427f37a30a4de9b,\n    __asyncDelegator: $5c96a02c592fcff1$export$bbd80228419bb833,\n    __asyncValues: $5c96a02c592fcff1$export$e3b29a3d6162315f,\n    __makeTemplateObject: $5c96a02c592fcff1$export$4fb47efe1390b86f,\n    __importStar: $5c96a02c592fcff1$export$c21735bcef00d192,\n    __importDefault: $5c96a02c592fcff1$export$da59b14a69baef04,\n    __classPrivateFieldGet: $5c96a02c592fcff1$export$d5dcaf168c640c35,\n    __classPrivateFieldSet: $5c96a02c592fcff1$export$d40a35129aaff81f,\n    __classPrivateFieldIn: $5c96a02c592fcff1$export$81fdc39f203e4e04\n};\n\n\n\nvar $8821cb8787de9fb5$export$1e2f57719e155213 = function(x) {\n    return x && typeof x.length === \"number\" && typeof x !== \"function\";\n};\n\n\nfunction $c1aa42b0603892d6$export$f6e2535fb5126e54(value) {\n    return typeof value === \"function\";\n}\n\n\nfunction $9dcf7896928e75dd$export$4369c812aac99591(value) {\n    return (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(value === null || value === void 0 ? void 0 : value.then);\n}\n\n\n\n\n\n\nfunction $ebe567a061bc80f6$export$128a15b65d1b6041(createImpl) {\n    var _super = function(instance) {\n        Error.call(instance);\n        instance.stack = new Error().stack;\n    };\n    var ctorFunc = createImpl(_super);\n    ctorFunc.prototype = Object.create(Error.prototype);\n    ctorFunc.prototype.constructor = ctorFunc;\n    return ctorFunc;\n}\n\n\nvar $f587043ffd615a90$export$c9648b76fd580c34 = (0, $ebe567a061bc80f6$export$128a15b65d1b6041)(function(_super) {\n    return function UnsubscriptionErrorImpl(errors) {\n        _super(this);\n        this.message = errors ? errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function(err, i) {\n            return i + 1 + \") \" + err.toString();\n        }).join(\"\\n  \") : \"\";\n        this.name = \"UnsubscriptionError\";\n        this.errors = errors;\n    };\n});\n\n\nfunction $2b94c03d07e501cc$export$dae3f38077fc36c0(arr, item) {\n    if (arr) {\n        var index = arr.indexOf(item);\n        0 <= index && arr.splice(index, 1);\n    }\n}\n\n\nvar $8343668acd7c4a9b$export$f55210826850c514 = function() {\n    function Subscription(initialTeardown) {\n        this.initialTeardown = initialTeardown;\n        this.closed = false;\n        this._parentage = null;\n        this._finalizers = null;\n    }\n    Subscription.prototype.unsubscribe = function() {\n        var e_1, _a, e_2, _b;\n        var errors;\n        if (!this.closed) {\n            this.closed = true;\n            var _parentage = this._parentage;\n            if (_parentage) {\n                this._parentage = null;\n                if (Array.isArray(_parentage)) try {\n                    for(var _parentage_1 = (0, $5c96a02c592fcff1$export$19a8beecd37a4c45)(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()){\n                        var parent_1 = _parentage_1_1.value;\n                        parent_1.remove(this);\n                    }\n                } catch (e_1_1) {\n                    e_1 = {\n                        error: e_1_1\n                    };\n                } finally{\n                    try {\n                        if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n                    } finally{\n                        if (e_1) throw e_1.error;\n                    }\n                }\n                else _parentage.remove(this);\n            }\n            var initialFinalizer = this.initialTeardown;\n            if ((0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(initialFinalizer)) try {\n                initialFinalizer();\n            } catch (e) {\n                errors = e instanceof (0, $f587043ffd615a90$export$c9648b76fd580c34) ? e.errors : [\n                    e\n                ];\n            }\n            var _finalizers = this._finalizers;\n            if (_finalizers) {\n                this._finalizers = null;\n                try {\n                    for(var _finalizers_1 = (0, $5c96a02c592fcff1$export$19a8beecd37a4c45)(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()){\n                        var finalizer = _finalizers_1_1.value;\n                        try {\n                            $8343668acd7c4a9b$var$execFinalizer(finalizer);\n                        } catch (err) {\n                            errors = errors !== null && errors !== void 0 ? errors : [];\n                            if (err instanceof (0, $f587043ffd615a90$export$c9648b76fd580c34)) errors = (0, $5c96a02c592fcff1$export$1216008129fb82ed)((0, $5c96a02c592fcff1$export$1216008129fb82ed)([], (0, $5c96a02c592fcff1$export$8d051b38c9118094)(errors)), (0, $5c96a02c592fcff1$export$8d051b38c9118094)(err.errors));\n                            else errors.push(err);\n                        }\n                    }\n                } catch (e_2_1) {\n                    e_2 = {\n                        error: e_2_1\n                    };\n                } finally{\n                    try {\n                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);\n                    } finally{\n                        if (e_2) throw e_2.error;\n                    }\n                }\n            }\n            if (errors) throw new (0, $f587043ffd615a90$export$c9648b76fd580c34)(errors);\n        }\n    };\n    Subscription.prototype.add = function(teardown) {\n        var _a;\n        if (teardown && teardown !== this) {\n            if (this.closed) $8343668acd7c4a9b$var$execFinalizer(teardown);\n            else {\n                if (teardown instanceof Subscription) {\n                    if (teardown.closed || teardown._hasParent(this)) return;\n                    teardown._addParent(this);\n                }\n                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);\n            }\n        }\n    };\n    Subscription.prototype._hasParent = function(parent) {\n        var _parentage = this._parentage;\n        return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);\n    };\n    Subscription.prototype._addParent = function(parent) {\n        var _parentage = this._parentage;\n        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [\n            _parentage,\n            parent\n        ] : parent;\n    };\n    Subscription.prototype._removeParent = function(parent) {\n        var _parentage = this._parentage;\n        if (_parentage === parent) this._parentage = null;\n        else if (Array.isArray(_parentage)) (0, $2b94c03d07e501cc$export$dae3f38077fc36c0)(_parentage, parent);\n    };\n    Subscription.prototype.remove = function(teardown) {\n        var _finalizers = this._finalizers;\n        _finalizers && (0, $2b94c03d07e501cc$export$dae3f38077fc36c0)(_finalizers, teardown);\n        if (teardown instanceof Subscription) teardown._removeParent(this);\n    };\n    Subscription.EMPTY = function() {\n        var empty = new Subscription();\n        empty.closed = true;\n        return empty;\n    }();\n    return Subscription;\n}();\nvar $8343668acd7c4a9b$export$610f9c3ca1a38dd8 = $8343668acd7c4a9b$export$f55210826850c514.EMPTY;\nfunction $8343668acd7c4a9b$export$4f9221cbada3c4fc(value) {\n    return value instanceof $8343668acd7c4a9b$export$f55210826850c514 || value && \"closed\" in value && (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(value.remove) && (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(value.add) && (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(value.unsubscribe);\n}\nfunction $8343668acd7c4a9b$var$execFinalizer(finalizer) {\n    if ((0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(finalizer)) finalizer();\n    else finalizer.unsubscribe();\n}\n\n\nvar $ca336efb1b4fb564$export$e506a1d27d1eaa20 = {\n    onUnhandledError: null,\n    onStoppedNotification: null,\n    Promise: undefined,\n    useDeprecatedSynchronousErrorHandling: false,\n    useDeprecatedNextContext: false\n};\n\n\n\n\nvar $c07b5bfa3b9d4401$export$365aa6bd3c788e3d = {\n    setTimeout: function(handler, timeout) {\n        var args = [];\n        for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];\n        var delegate = $c07b5bfa3b9d4401$export$365aa6bd3c788e3d.delegate;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) return delegate.setTimeout.apply(delegate, (0, $5c96a02c592fcff1$export$1216008129fb82ed)([\n            handler,\n            timeout\n        ], (0, $5c96a02c592fcff1$export$8d051b38c9118094)(args)));\n        return setTimeout.apply(void 0, (0, $5c96a02c592fcff1$export$1216008129fb82ed)([\n            handler,\n            timeout\n        ], (0, $5c96a02c592fcff1$export$8d051b38c9118094)(args)));\n    },\n    clearTimeout: function(handle) {\n        var delegate = $c07b5bfa3b9d4401$export$365aa6bd3c788e3d.delegate;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);\n    },\n    delegate: undefined\n};\n\n\nfunction $18eb28ff53cc4943$export$ebf645db02d3e99f(err) {\n    (0, $c07b5bfa3b9d4401$export$365aa6bd3c788e3d).setTimeout(function() {\n        var onUnhandledError = (0, $ca336efb1b4fb564$export$e506a1d27d1eaa20).onUnhandledError;\n        if (onUnhandledError) onUnhandledError(err);\n        else throw err;\n    });\n}\n\n\nfunction $528e75db69787807$export$8793edee2d425525() {}\n\n\nvar $0ba077a4cdfd9739$export$b7f97edb34bc1f87 = function() {\n    return $0ba077a4cdfd9739$export$9c8f6e8d39c60cf3(\"C\", undefined, undefined);\n}();\nfunction $0ba077a4cdfd9739$export$dd472c3d8fe5a85a(error) {\n    return $0ba077a4cdfd9739$export$9c8f6e8d39c60cf3(\"E\", undefined, error);\n}\nfunction $0ba077a4cdfd9739$export$ff9346b0d1d30313(value) {\n    return $0ba077a4cdfd9739$export$9c8f6e8d39c60cf3(\"N\", value, undefined);\n}\nfunction $0ba077a4cdfd9739$export$9c8f6e8d39c60cf3(kind, value, error) {\n    return {\n        kind: kind,\n        value: value,\n        error: error\n    };\n}\n\n\n\n\nvar $92213d3dd6a83b5d$var$context = null;\nfunction $92213d3dd6a83b5d$export$d974811edc77eafa(cb) {\n    if ((0, $ca336efb1b4fb564$export$e506a1d27d1eaa20).useDeprecatedSynchronousErrorHandling) {\n        var isRoot = !$92213d3dd6a83b5d$var$context;\n        if (isRoot) $92213d3dd6a83b5d$var$context = {\n            errorThrown: false,\n            error: null\n        };\n        cb();\n        if (isRoot) {\n            var _a = $92213d3dd6a83b5d$var$context, errorThrown = _a.errorThrown, error = _a.error;\n            $92213d3dd6a83b5d$var$context = null;\n            if (errorThrown) throw error;\n        }\n    } else cb();\n}\nfunction $92213d3dd6a83b5d$export$3e205fbb5df021e0(err) {\n    if ((0, $ca336efb1b4fb564$export$e506a1d27d1eaa20).useDeprecatedSynchronousErrorHandling && $92213d3dd6a83b5d$var$context) {\n        $92213d3dd6a83b5d$var$context.errorThrown = true;\n        $92213d3dd6a83b5d$var$context.error = err;\n    }\n}\n\n\nvar $cf8ce74b80455e9f$export$60959659b2c22881 = function(_super) {\n    (0, $5c96a02c592fcff1$export$a8ba968b8961cb8a)(Subscriber, _super);\n    function Subscriber(destination) {\n        var _this = _super.call(this) || this;\n        _this.isStopped = false;\n        if (destination) {\n            _this.destination = destination;\n            if ((0, $8343668acd7c4a9b$export$4f9221cbada3c4fc)(destination)) destination.add(_this);\n        } else _this.destination = $cf8ce74b80455e9f$export$88d395d20619a0af;\n        return _this;\n    }\n    Subscriber.create = function(next, error, complete) {\n        return new $cf8ce74b80455e9f$export$94eeb6a328cab6c7(next, error, complete);\n    };\n    Subscriber.prototype.next = function(value) {\n        if (this.isStopped) $cf8ce74b80455e9f$var$handleStoppedNotification((0, $0ba077a4cdfd9739$export$ff9346b0d1d30313)(value), this);\n        else this._next(value);\n    };\n    Subscriber.prototype.error = function(err) {\n        if (this.isStopped) $cf8ce74b80455e9f$var$handleStoppedNotification((0, $0ba077a4cdfd9739$export$dd472c3d8fe5a85a)(err), this);\n        else {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function() {\n        if (this.isStopped) $cf8ce74b80455e9f$var$handleStoppedNotification((0, $0ba077a4cdfd9739$export$b7f97edb34bc1f87), this);\n        else {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function() {\n        if (!this.closed) {\n            this.isStopped = true;\n            _super.prototype.unsubscribe.call(this);\n            this.destination = null;\n        }\n    };\n    Subscriber.prototype._next = function(value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function(err) {\n        try {\n            this.destination.error(err);\n        } finally{\n            this.unsubscribe();\n        }\n    };\n    Subscriber.prototype._complete = function() {\n        try {\n            this.destination.complete();\n        } finally{\n            this.unsubscribe();\n        }\n    };\n    return Subscriber;\n}((0, $8343668acd7c4a9b$export$f55210826850c514));\nvar $cf8ce74b80455e9f$var$_bind = Function.prototype.bind;\nfunction $cf8ce74b80455e9f$var$bind(fn, thisArg) {\n    return $cf8ce74b80455e9f$var$_bind.call(fn, thisArg);\n}\nvar $cf8ce74b80455e9f$var$ConsumerObserver = function() {\n    function ConsumerObserver(partialObserver) {\n        this.partialObserver = partialObserver;\n    }\n    ConsumerObserver.prototype.next = function(value) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.next) try {\n            partialObserver.next(value);\n        } catch (error) {\n            $cf8ce74b80455e9f$var$handleUnhandledError(error);\n        }\n    };\n    ConsumerObserver.prototype.error = function(err) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.error) try {\n            partialObserver.error(err);\n        } catch (error) {\n            $cf8ce74b80455e9f$var$handleUnhandledError(error);\n        }\n        else $cf8ce74b80455e9f$var$handleUnhandledError(err);\n    };\n    ConsumerObserver.prototype.complete = function() {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.complete) try {\n            partialObserver.complete();\n        } catch (error) {\n            $cf8ce74b80455e9f$var$handleUnhandledError(error);\n        }\n    };\n    return ConsumerObserver;\n}();\nvar $cf8ce74b80455e9f$export$94eeb6a328cab6c7 = function(_super) {\n    (0, $5c96a02c592fcff1$export$a8ba968b8961cb8a)(SafeSubscriber, _super);\n    function SafeSubscriber(observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        var partialObserver;\n        if ((0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(observerOrNext) || !observerOrNext) partialObserver = {\n            next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,\n            error: error !== null && error !== void 0 ? error : undefined,\n            complete: complete !== null && complete !== void 0 ? complete : undefined\n        };\n        else {\n            var context_1;\n            if (_this && (0, $ca336efb1b4fb564$export$e506a1d27d1eaa20).useDeprecatedNextContext) {\n                context_1 = Object.create(observerOrNext);\n                context_1.unsubscribe = function() {\n                    return _this.unsubscribe();\n                };\n                partialObserver = {\n                    next: observerOrNext.next && $cf8ce74b80455e9f$var$bind(observerOrNext.next, context_1),\n                    error: observerOrNext.error && $cf8ce74b80455e9f$var$bind(observerOrNext.error, context_1),\n                    complete: observerOrNext.complete && $cf8ce74b80455e9f$var$bind(observerOrNext.complete, context_1)\n                };\n            } else partialObserver = observerOrNext;\n        }\n        _this.destination = new $cf8ce74b80455e9f$var$ConsumerObserver(partialObserver);\n        return _this;\n    }\n    return SafeSubscriber;\n}($cf8ce74b80455e9f$export$60959659b2c22881);\nfunction $cf8ce74b80455e9f$var$handleUnhandledError(error) {\n    if ((0, $ca336efb1b4fb564$export$e506a1d27d1eaa20).useDeprecatedSynchronousErrorHandling) (0, $92213d3dd6a83b5d$export$3e205fbb5df021e0)(error);\n    else (0, $18eb28ff53cc4943$export$ebf645db02d3e99f)(error);\n}\nfunction $cf8ce74b80455e9f$var$defaultErrorHandler(err) {\n    throw err;\n}\nfunction $cf8ce74b80455e9f$var$handleStoppedNotification(notification, subscriber) {\n    var onStoppedNotification = (0, $ca336efb1b4fb564$export$e506a1d27d1eaa20).onStoppedNotification;\n    onStoppedNotification && (0, $c07b5bfa3b9d4401$export$365aa6bd3c788e3d).setTimeout(function() {\n        return onStoppedNotification(notification, subscriber);\n    });\n}\nvar $cf8ce74b80455e9f$export$88d395d20619a0af = {\n    closed: true,\n    next: (0, $528e75db69787807$export$8793edee2d425525),\n    error: $cf8ce74b80455e9f$var$defaultErrorHandler,\n    complete: (0, $528e75db69787807$export$8793edee2d425525)\n};\n\n\n\nvar $eaf29fccbded6ed3$export$5ab46cbf6120b33a = function() {\n    return typeof Symbol === \"function\" && Symbol.observable || \"@@observable\";\n}();\n\n\nfunction $7569c528cdd9d182$export$f0954fd7d5368655(x) {\n    return x;\n}\n\n\nfunction $0f1e8e2d1fe93adf$export$a4627e546088548d() {\n    var fns = [];\n    for(var _i = 0; _i < arguments.length; _i++)fns[_i] = arguments[_i];\n    return $0f1e8e2d1fe93adf$export$71f88a61afaa14d7(fns);\n}\nfunction $0f1e8e2d1fe93adf$export$71f88a61afaa14d7(fns) {\n    if (fns.length === 0) return 0, $7569c528cdd9d182$export$f0954fd7d5368655;\n    if (fns.length === 1) return fns[0];\n    return function piped(input) {\n        return fns.reduce(function(prev, fn) {\n            return fn(prev);\n        }, input);\n    };\n}\n\n\n\n\n\nvar $4f562137a990678a$export$77cea355fa80b5f4 = function() {\n    function Observable(subscribe) {\n        if (subscribe) this._subscribe = subscribe;\n    }\n    Observable.prototype.lift = function(operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function(observerOrNext, error, complete) {\n        var _this = this;\n        var subscriber = $4f562137a990678a$var$isSubscriber(observerOrNext) ? observerOrNext : new (0, $cf8ce74b80455e9f$export$94eeb6a328cab6c7)(observerOrNext, error, complete);\n        (0, $92213d3dd6a83b5d$export$d974811edc77eafa)(function() {\n            var _a = _this, operator = _a.operator, source = _a.source;\n            subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));\n        });\n        return subscriber;\n    };\n    Observable.prototype._trySubscribe = function(sink) {\n        try {\n            return this._subscribe(sink);\n        } catch (err) {\n            sink.error(err);\n        }\n    };\n    Observable.prototype.forEach = function(next, promiseCtor) {\n        var _this = this;\n        promiseCtor = $4f562137a990678a$var$getPromiseCtor(promiseCtor);\n        return new promiseCtor(function(resolve, reject) {\n            var subscriber = new (0, $cf8ce74b80455e9f$export$94eeb6a328cab6c7)({\n                next: function(value) {\n                    try {\n                        next(value);\n                    } catch (err) {\n                        reject(err);\n                        subscriber.unsubscribe();\n                    }\n                },\n                error: reject,\n                complete: resolve\n            });\n            _this.subscribe(subscriber);\n        });\n    };\n    Observable.prototype._subscribe = function(subscriber) {\n        var _a;\n        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n    };\n    Observable.prototype[0, $eaf29fccbded6ed3$export$5ab46cbf6120b33a] = function() {\n        return this;\n    };\n    Observable.prototype.pipe = function() {\n        var operations = [];\n        for(var _i = 0; _i < arguments.length; _i++)operations[_i] = arguments[_i];\n        return (0, $0f1e8e2d1fe93adf$export$71f88a61afaa14d7)(operations)(this);\n    };\n    Observable.prototype.toPromise = function(promiseCtor) {\n        var _this = this;\n        promiseCtor = $4f562137a990678a$var$getPromiseCtor(promiseCtor);\n        return new promiseCtor(function(resolve, reject) {\n            var value;\n            _this.subscribe(function(x) {\n                return value = x;\n            }, function(err) {\n                return reject(err);\n            }, function() {\n                return resolve(value);\n            });\n        });\n    };\n    Observable.create = function(subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}();\nfunction $4f562137a990678a$var$getPromiseCtor(promiseCtor) {\n    var _a;\n    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : (0, $ca336efb1b4fb564$export$e506a1d27d1eaa20).Promise) !== null && _a !== void 0 ? _a : Promise;\n}\nfunction $4f562137a990678a$var$isObserver(value) {\n    return value && (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(value.next) && (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(value.error) && (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(value.complete);\n}\nfunction $4f562137a990678a$var$isSubscriber(value) {\n    return value && value instanceof (0, $cf8ce74b80455e9f$export$60959659b2c22881) || $4f562137a990678a$var$isObserver(value) && (0, $8343668acd7c4a9b$export$4f9221cbada3c4fc)(value);\n}\n\n\n\n\nfunction $0539b51af1903d0a$export$48c0cddbc99c45c2(input) {\n    return (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(input[0, $eaf29fccbded6ed3$export$5ab46cbf6120b33a]);\n}\n\n\n\nfunction $7c74d6a5e2273447$export$edb10ab8dd75a915(obj) {\n    return Symbol.asyncIterator && (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);\n}\n\n\nfunction $d63b3f5b704e6de4$export$7cbe71b9fa263484(input) {\n    return new TypeError(\"You provided \" + (input !== null && typeof input === \"object\" ? \"an invalid object\" : \"'\" + input + \"'\") + \" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.\");\n}\n\n\nfunction $0b89b4d4fb8bd3fd$export$aa9956be4ae4fe8() {\n    if (typeof Symbol !== \"function\" || !Symbol.iterator) return \"@@iterator\";\n    return Symbol.iterator;\n}\nvar $0b89b4d4fb8bd3fd$export$6f58e2338da23f4d = $0b89b4d4fb8bd3fd$export$aa9956be4ae4fe8();\n\n\n\nfunction $b8a13650b96f19ab$export$9652023d9040757(input) {\n    return (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(input === null || input === void 0 ? void 0 : input[0, $0b89b4d4fb8bd3fd$export$6f58e2338da23f4d]);\n}\n\n\n\n\nfunction $54b99b9095e84ce4$export$cf4785e597badab3(readableStream) {\n    return (0, $5c96a02c592fcff1$export$e427f37a30a4de9b)(this, arguments, function readableStreamLikeToAsyncGenerator_1() {\n        var reader, _a, value, done;\n        return (0, $5c96a02c592fcff1$export$67ebef60e6f28a6)(this, function(_b) {\n            switch(_b.label){\n                case 0:\n                    reader = readableStream.getReader();\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([\n                        1,\n                        ,\n                        9,\n                        10\n                    ]);\n                    _b.label = 2;\n                case 2:\n                    return [\n                        4,\n                        (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(reader.read())\n                    ];\n                case 3:\n                    _a = _b.sent(), value = _a.value, done = _a.done;\n                    if (!done) return [\n                        3,\n                        5\n                    ];\n                    return [\n                        4,\n                        (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(void 0)\n                    ];\n                case 4:\n                    return [\n                        2,\n                        _b.sent()\n                    ];\n                case 5:\n                    return [\n                        4,\n                        (0, $5c96a02c592fcff1$export$10c90e4f7922046c)(value)\n                    ];\n                case 6:\n                    return [\n                        4,\n                        _b.sent()\n                    ];\n                case 7:\n                    _b.sent();\n                    return [\n                        3,\n                        2\n                    ];\n                case 8:\n                    return [\n                        3,\n                        10\n                    ];\n                case 9:\n                    reader.releaseLock();\n                    return [\n                        7\n                    ];\n                case 10:\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n}\nfunction $54b99b9095e84ce4$export$c088ffafdba7405f(obj) {\n    return (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(obj === null || obj === void 0 ? void 0 : obj.getReader);\n}\n\n\n\n\n\nfunction $1dc2e2cd8f7c5351$export$6a9cfa3ebc765910(input) {\n    if (input instanceof (0, $4f562137a990678a$export$77cea355fa80b5f4)) return input;\n    if (input != null) {\n        if ((0, $0539b51af1903d0a$export$48c0cddbc99c45c2)(input)) return $1dc2e2cd8f7c5351$export$aa3d41784b3267fa(input);\n        if ((0, $8821cb8787de9fb5$export$1e2f57719e155213)(input)) return $1dc2e2cd8f7c5351$export$4cb2acdbcda2c253(input);\n        if ((0, $9dcf7896928e75dd$export$4369c812aac99591)(input)) return $1dc2e2cd8f7c5351$export$60f45028237c39d1(input);\n        if ((0, $7c74d6a5e2273447$export$edb10ab8dd75a915)(input)) return $1dc2e2cd8f7c5351$export$e073fccf36d78cc1(input);\n        if ((0, $b8a13650b96f19ab$export$9652023d9040757)(input)) return $1dc2e2cd8f7c5351$export$dcccc29c315dd646(input);\n        if ((0, $54b99b9095e84ce4$export$c088ffafdba7405f)(input)) return $1dc2e2cd8f7c5351$export$b2dcb11d46e7a4ad(input);\n    }\n    throw (0, $d63b3f5b704e6de4$export$7cbe71b9fa263484)(input);\n}\nfunction $1dc2e2cd8f7c5351$export$aa3d41784b3267fa(obj) {\n    return new (0, $4f562137a990678a$export$77cea355fa80b5f4)(function(subscriber) {\n        var obs = obj[0, $eaf29fccbded6ed3$export$5ab46cbf6120b33a]();\n        if ((0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(obs.subscribe)) return obs.subscribe(subscriber);\n        throw new TypeError(\"Provided object does not correctly implement Symbol.observable\");\n    });\n}\nfunction $1dc2e2cd8f7c5351$export$4cb2acdbcda2c253(array) {\n    return new (0, $4f562137a990678a$export$77cea355fa80b5f4)(function(subscriber) {\n        for(var i = 0; i < array.length && !subscriber.closed; i++)subscriber.next(array[i]);\n        subscriber.complete();\n    });\n}\nfunction $1dc2e2cd8f7c5351$export$60f45028237c39d1(promise) {\n    return new (0, $4f562137a990678a$export$77cea355fa80b5f4)(function(subscriber) {\n        promise.then(function(value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function(err) {\n            return subscriber.error(err);\n        }).then(null, (0, $18eb28ff53cc4943$export$ebf645db02d3e99f));\n    });\n}\nfunction $1dc2e2cd8f7c5351$export$dcccc29c315dd646(iterable) {\n    return new (0, $4f562137a990678a$export$77cea355fa80b5f4)(function(subscriber) {\n        var e_1, _a;\n        try {\n            for(var iterable_1 = (0, $5c96a02c592fcff1$export$19a8beecd37a4c45)(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()){\n                var value = iterable_1_1.value;\n                subscriber.next(value);\n                if (subscriber.closed) return;\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n        subscriber.complete();\n    });\n}\nfunction $1dc2e2cd8f7c5351$export$e073fccf36d78cc1(asyncIterable) {\n    return new (0, $4f562137a990678a$export$77cea355fa80b5f4)(function(subscriber) {\n        $1dc2e2cd8f7c5351$var$process(asyncIterable, subscriber).catch(function(err) {\n            return subscriber.error(err);\n        });\n    });\n}\nfunction $1dc2e2cd8f7c5351$export$b2dcb11d46e7a4ad(readableStream) {\n    return $1dc2e2cd8f7c5351$export$e073fccf36d78cc1((0, $54b99b9095e84ce4$export$cf4785e597badab3)(readableStream));\n}\nfunction $1dc2e2cd8f7c5351$var$process(asyncIterable, subscriber) {\n    var asyncIterable_1, asyncIterable_1_1;\n    var e_2, _a;\n    return (0, $5c96a02c592fcff1$export$1050f835b63b671e)(this, void 0, void 0, function() {\n        var value, e_2_1;\n        return (0, $5c96a02c592fcff1$export$67ebef60e6f28a6)(this, function(_b) {\n            switch(_b.label){\n                case 0:\n                    _b.trys.push([\n                        0,\n                        5,\n                        6,\n                        11\n                    ]);\n                    asyncIterable_1 = (0, $5c96a02c592fcff1$export$e3b29a3d6162315f)(asyncIterable);\n                    _b.label = 1;\n                case 1:\n                    return [\n                        4,\n                        asyncIterable_1.next()\n                    ];\n                case 2:\n                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [\n                        3,\n                        4\n                    ];\n                    value = asyncIterable_1_1.value;\n                    subscriber.next(value);\n                    if (subscriber.closed) return [\n                        2\n                    ];\n                    _b.label = 3;\n                case 3:\n                    return [\n                        3,\n                        1\n                    ];\n                case 4:\n                    return [\n                        3,\n                        11\n                    ];\n                case 5:\n                    e_2_1 = _b.sent();\n                    e_2 = {\n                        error: e_2_1\n                    };\n                    return [\n                        3,\n                        11\n                    ];\n                case 6:\n                    _b.trys.push([\n                        6,\n                        ,\n                        9,\n                        10\n                    ]);\n                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [\n                        3,\n                        8\n                    ];\n                    return [\n                        4,\n                        _a.call(asyncIterable_1)\n                    ];\n                case 7:\n                    _b.sent();\n                    _b.label = 8;\n                case 8:\n                    return [\n                        3,\n                        10\n                    ];\n                case 9:\n                    if (e_2) throw e_2.error;\n                    return [\n                        7\n                    ];\n                case 10:\n                    return [\n                        7\n                    ];\n                case 11:\n                    subscriber.complete();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n}\n\n\n\n\nfunction $992c4a42843eb1d0$export$ebec8610810318c5(source) {\n    return (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(source === null || source === void 0 ? void 0 : source.lift);\n}\nfunction $992c4a42843eb1d0$export$871731df685d7753(init) {\n    return function(source) {\n        if ($992c4a42843eb1d0$export$ebec8610810318c5(source)) return source.lift(function(liftedSource) {\n            try {\n                return init(liftedSource, this);\n            } catch (err) {\n                this.error(err);\n            }\n        });\n        throw new TypeError(\"Unable to lift unknown Observable type\");\n    };\n}\n\n\n\n\nfunction $3868f035248205c1$export$b9e075132cc6937f(destination, onNext, onComplete, onError, onFinalize) {\n    return new $3868f035248205c1$export$8fbbf0c4d80268e5(destination, onNext, onComplete, onError, onFinalize);\n}\nvar $3868f035248205c1$export$8fbbf0c4d80268e5 = function(_super) {\n    (0, $5c96a02c592fcff1$export$a8ba968b8961cb8a)(OperatorSubscriber, _super);\n    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        var _this = _super.call(this, destination) || this;\n        _this.onFinalize = onFinalize;\n        _this.shouldUnsubscribe = shouldUnsubscribe;\n        _this._next = onNext ? function(value) {\n            try {\n                onNext(value);\n            } catch (err) {\n                destination.error(err);\n            }\n        } : _super.prototype._next;\n        _this._error = onError ? function(err) {\n            try {\n                onError(err);\n            } catch (err) {\n                destination.error(err);\n            } finally{\n                this.unsubscribe();\n            }\n        } : _super.prototype._error;\n        _this._complete = onComplete ? function() {\n            try {\n                onComplete();\n            } catch (err) {\n                destination.error(err);\n            } finally{\n                this.unsubscribe();\n            }\n        } : _super.prototype._complete;\n        return _this;\n    }\n    OperatorSubscriber.prototype.unsubscribe = function() {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            var closed_1 = this.closed;\n            _super.prototype.unsubscribe.call(this);\n            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 || _a.call(this));\n        }\n    };\n    return OperatorSubscriber;\n}((0, $cf8ce74b80455e9f$export$60959659b2c22881));\n\n\nfunction $9853a79d111e4e33$export$871de8747c9eaa88(project, thisArg) {\n    return (0, $992c4a42843eb1d0$export$871731df685d7753)(function(source, subscriber) {\n        var index = 0;\n        source.subscribe((0, $3868f035248205c1$export$b9e075132cc6937f)(subscriber, function(value) {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n\n\n\n\n\nfunction $3525e15e439f8b93$export$a2b7447487315232(parentSubscription, scheduler, work, delay, repeat) {\n    if (delay === void 0) delay = 0;\n    if (repeat === void 0) repeat = false;\n    var scheduleSubscription = scheduler.schedule(function() {\n        work();\n        if (repeat) parentSubscription.add(this.schedule(null, delay));\n        else this.unsubscribe();\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) return scheduleSubscription;\n}\n\n\n\nfunction $9cbbbba4f565a378$export$600918ebaa9e0a1b(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    var buffer = [];\n    var active = 0;\n    var index = 0;\n    var isComplete = false;\n    var checkComplete = function() {\n        if (isComplete && !buffer.length && !active) subscriber.complete();\n    };\n    var outerNext = function(value) {\n        return active < concurrent ? doInnerSub(value) : buffer.push(value);\n    };\n    var doInnerSub = function(value) {\n        expand && subscriber.next(value);\n        active++;\n        var innerComplete = false;\n        (0, $1dc2e2cd8f7c5351$export$6a9cfa3ebc765910)(project(value, index++)).subscribe((0, $3868f035248205c1$export$b9e075132cc6937f)(subscriber, function(innerValue) {\n            onBeforeNext === null || onBeforeNext === void 0 || onBeforeNext(innerValue);\n            if (expand) outerNext(innerValue);\n            else subscriber.next(innerValue);\n        }, function() {\n            innerComplete = true;\n        }, undefined, function() {\n            if (innerComplete) try {\n                active--;\n                var _loop_1 = function() {\n                    var bufferedValue = buffer.shift();\n                    if (innerSubScheduler) (0, $3525e15e439f8b93$export$a2b7447487315232)(subscriber, innerSubScheduler, function() {\n                        return doInnerSub(bufferedValue);\n                    });\n                    else doInnerSub(bufferedValue);\n                };\n                while(buffer.length && active < concurrent)_loop_1();\n                checkComplete();\n            } catch (err) {\n                subscriber.error(err);\n            }\n        }));\n    };\n    source.subscribe((0, $3868f035248205c1$export$b9e075132cc6937f)(subscriber, outerNext, function() {\n        isComplete = true;\n        checkComplete();\n    }));\n    return function() {\n        additionalFinalizer === null || additionalFinalizer === void 0 || additionalFinalizer();\n    };\n}\n\n\n\nfunction $46964ba1b403cbfc$export$6b9f6c0d32c093f9(project, resultSelector, concurrent) {\n    if (concurrent === void 0) concurrent = Infinity;\n    if ((0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(resultSelector)) return $46964ba1b403cbfc$export$6b9f6c0d32c093f9(function(a, i) {\n        return (0, $9853a79d111e4e33$export$871de8747c9eaa88)(function(b, ii) {\n            return resultSelector(a, b, i, ii);\n        })((0, $1dc2e2cd8f7c5351$export$6a9cfa3ebc765910)(project(a, i)));\n    }, concurrent);\n    else if (typeof resultSelector === \"number\") concurrent = resultSelector;\n    return (0, $992c4a42843eb1d0$export$871731df685d7753)(function(source, subscriber) {\n        return (0, $9cbbbba4f565a378$export$600918ebaa9e0a1b)(source, subscriber, project, concurrent);\n    });\n}\n\n\n\n\n\n\nvar $e6cd63efe08c02de$var$isArray = Array.isArray;\nfunction $e6cd63efe08c02de$var$callOrApply(fn, args) {\n    return $e6cd63efe08c02de$var$isArray(args) ? fn.apply(void 0, (0, $5c96a02c592fcff1$export$1216008129fb82ed)([], (0, $5c96a02c592fcff1$export$8d051b38c9118094)(args))) : fn(args);\n}\nfunction $e6cd63efe08c02de$export$559affaa48f4288d(fn) {\n    return (0, $9853a79d111e4e33$export$871de8747c9eaa88)(function(args) {\n        return $e6cd63efe08c02de$var$callOrApply(fn, args);\n    });\n}\n\n\nvar $f65a851e0b190f66$var$nodeEventEmitterMethods = [\n    \"addListener\",\n    \"removeListener\"\n];\nvar $f65a851e0b190f66$var$eventTargetMethods = [\n    \"addEventListener\",\n    \"removeEventListener\"\n];\nvar $f65a851e0b190f66$var$jqueryMethods = [\n    \"on\",\n    \"off\"\n];\nfunction $f65a851e0b190f66$export$a36e16046ae8f1bb(target, eventName, options, resultSelector) {\n    if ((0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) return $f65a851e0b190f66$export$a36e16046ae8f1bb(target, eventName, options).pipe((0, $e6cd63efe08c02de$export$559affaa48f4288d)(resultSelector));\n    var _a = (0, $5c96a02c592fcff1$export$8d051b38c9118094)($f65a851e0b190f66$var$isEventTarget(target) ? $f65a851e0b190f66$var$eventTargetMethods.map(function(methodName) {\n        return function(handler) {\n            return target[methodName](eventName, handler, options);\n        };\n    }) : $f65a851e0b190f66$var$isNodeStyleEventEmitter(target) ? $f65a851e0b190f66$var$nodeEventEmitterMethods.map($f65a851e0b190f66$var$toCommonHandlerRegistry(target, eventName)) : $f65a851e0b190f66$var$isJQueryStyleEventEmitter(target) ? $f65a851e0b190f66$var$jqueryMethods.map($f65a851e0b190f66$var$toCommonHandlerRegistry(target, eventName)) : [], 2), add = _a[0], remove = _a[1];\n    if (!add) {\n        if ((0, $8821cb8787de9fb5$export$1e2f57719e155213)(target)) return (0, $46964ba1b403cbfc$export$6b9f6c0d32c093f9)(function(subTarget) {\n            return $f65a851e0b190f66$export$a36e16046ae8f1bb(subTarget, eventName, options);\n        })((0, $1dc2e2cd8f7c5351$export$6a9cfa3ebc765910)(target));\n    }\n    if (!add) throw new TypeError(\"Invalid event target\");\n    return new (0, $4f562137a990678a$export$77cea355fa80b5f4)(function(subscriber) {\n        var handler = function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];\n            return subscriber.next(1 < args.length ? args : args[0]);\n        };\n        add(handler);\n        return function() {\n            return remove(handler);\n        };\n    });\n}\nfunction $f65a851e0b190f66$var$toCommonHandlerRegistry(target, eventName) {\n    return function(methodName) {\n        return function(handler) {\n            return target[methodName](eventName, handler);\n        };\n    };\n}\nfunction $f65a851e0b190f66$var$isNodeStyleEventEmitter(target) {\n    return (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(target.addListener) && (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(target.removeListener);\n}\nfunction $f65a851e0b190f66$var$isJQueryStyleEventEmitter(target) {\n    return (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(target.on) && (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(target.off);\n}\nfunction $f65a851e0b190f66$var$isEventTarget(target) {\n    return (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(target.addEventListener) && (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(target.removeEventListener);\n}\n\n\n\nfunction $4707859e785b3da6$export$18aef43295bbe906(concurrent) {\n    if (concurrent === void 0) concurrent = Infinity;\n    return (0, $46964ba1b403cbfc$export$6b9f6c0d32c093f9)((0, $7569c528cdd9d182$export$f0954fd7d5368655), concurrent);\n}\n\n\nfunction $3a4e37c3b56570cb$export$b314777ae20abca9() {\n    return (0, $4707859e785b3da6$export$18aef43295bbe906)(1);\n}\n\n\n\n\nfunction $cd8e5ea142a386bd$export$187e35932e88c15c(value) {\n    return value && (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(value.schedule);\n}\n\n\nfunction $3b29c258456d9a89$var$last(arr) {\n    return arr[arr.length - 1];\n}\nfunction $3b29c258456d9a89$export$9ae19b645239a61b(args) {\n    return (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)($3b29c258456d9a89$var$last(args)) ? args.pop() : undefined;\n}\nfunction $3b29c258456d9a89$export$29534b2f653ae592(args) {\n    return (0, $cd8e5ea142a386bd$export$187e35932e88c15c)($3b29c258456d9a89$var$last(args)) ? args.pop() : undefined;\n}\nfunction $3b29c258456d9a89$export$3de14b735070dcd5(args, defaultValue) {\n    return typeof $3b29c258456d9a89$var$last(args) === \"number\" ? args.pop() : defaultValue;\n}\n\n\n\n\n\n\nfunction $25136415cad576bc$export$9007f49c319d1ac7(scheduler, delay) {\n    if (delay === void 0) delay = 0;\n    return (0, $992c4a42843eb1d0$export$871731df685d7753)(function(source, subscriber) {\n        source.subscribe((0, $3868f035248205c1$export$b9e075132cc6937f)(subscriber, function(value) {\n            return (0, $3525e15e439f8b93$export$a2b7447487315232)(subscriber, scheduler, function() {\n                return subscriber.next(value);\n            }, delay);\n        }, function() {\n            return (0, $3525e15e439f8b93$export$a2b7447487315232)(subscriber, scheduler, function() {\n                return subscriber.complete();\n            }, delay);\n        }, function(err) {\n            return (0, $3525e15e439f8b93$export$a2b7447487315232)(subscriber, scheduler, function() {\n                return subscriber.error(err);\n            }, delay);\n        }));\n    });\n}\n\n\n\nfunction $daf4fd612cb884aa$export$1eb44d8f5f64733b(scheduler, delay) {\n    if (delay === void 0) delay = 0;\n    return (0, $992c4a42843eb1d0$export$871731df685d7753)(function(source, subscriber) {\n        subscriber.add(scheduler.schedule(function() {\n            return source.subscribe(subscriber);\n        }, delay));\n    });\n}\n\n\nfunction $e3a1d71c442b5de9$export$ed8bd553a12b6a30(input, scheduler) {\n    return (0, $1dc2e2cd8f7c5351$export$6a9cfa3ebc765910)(input).pipe((0, $daf4fd612cb884aa$export$1eb44d8f5f64733b)(scheduler), (0, $25136415cad576bc$export$9007f49c319d1ac7)(scheduler));\n}\n\n\n\n\n\nfunction $7ea29ae5d684fb04$export$fc9afd948577f0a8(input, scheduler) {\n    return (0, $1dc2e2cd8f7c5351$export$6a9cfa3ebc765910)(input).pipe((0, $daf4fd612cb884aa$export$1eb44d8f5f64733b)(scheduler), (0, $25136415cad576bc$export$9007f49c319d1ac7)(scheduler));\n}\n\n\n\nfunction $0ce5b91768be0a6d$export$b34673931371729a(input, scheduler) {\n    return new (0, $4f562137a990678a$export$77cea355fa80b5f4)(function(subscriber) {\n        var i = 0;\n        return scheduler.schedule(function() {\n            if (i === input.length) subscriber.complete();\n            else {\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) this.schedule();\n            }\n        });\n    });\n}\n\n\n\n\n\n\nfunction $3a22bf76b9b6de63$export$2b75c58ab9b5b766(input, scheduler) {\n    return new (0, $4f562137a990678a$export$77cea355fa80b5f4)(function(subscriber) {\n        var iterator;\n        (0, $3525e15e439f8b93$export$a2b7447487315232)(subscriber, scheduler, function() {\n            iterator = input[0, $0b89b4d4fb8bd3fd$export$6f58e2338da23f4d]();\n            (0, $3525e15e439f8b93$export$a2b7447487315232)(subscriber, scheduler, function() {\n                var _a;\n                var value;\n                var done;\n                try {\n                    _a = iterator.next(), value = _a.value, done = _a.done;\n                } catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) subscriber.complete();\n                else subscriber.next(value);\n            }, 0, true);\n        });\n        return function() {\n            return (0, $c1aa42b0603892d6$export$f6e2535fb5126e54)(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n        };\n    });\n}\n\n\n\n\nfunction $d2627b52a3f1ff1b$export$7c7f0979b56a32f3(input, scheduler) {\n    if (!input) throw new Error(\"Iterable cannot be null\");\n    return new (0, $4f562137a990678a$export$77cea355fa80b5f4)(function(subscriber) {\n        (0, $3525e15e439f8b93$export$a2b7447487315232)(subscriber, scheduler, function() {\n            var iterator = input[Symbol.asyncIterator]();\n            (0, $3525e15e439f8b93$export$a2b7447487315232)(subscriber, scheduler, function() {\n                iterator.next().then(function(result) {\n                    if (result.done) subscriber.complete();\n                    else subscriber.next(result.value);\n                });\n            }, 0, true);\n        });\n    });\n}\n\n\n\n\n\n\n\n\n\n\n\nfunction $7999ea1c5b71ad25$export$3385251aeecad28a(input, scheduler) {\n    return (0, $d2627b52a3f1ff1b$export$7c7f0979b56a32f3)((0, $54b99b9095e84ce4$export$cf4785e597badab3)(input), scheduler);\n}\n\n\nfunction $8f2bbfa9b5105688$export$49c44dfc2bb21d70(input, scheduler) {\n    if (input != null) {\n        if ((0, $0539b51af1903d0a$export$48c0cddbc99c45c2)(input)) return (0, $e3a1d71c442b5de9$export$ed8bd553a12b6a30)(input, scheduler);\n        if ((0, $8821cb8787de9fb5$export$1e2f57719e155213)(input)) return (0, $0ce5b91768be0a6d$export$b34673931371729a)(input, scheduler);\n        if ((0, $9dcf7896928e75dd$export$4369c812aac99591)(input)) return (0, $7ea29ae5d684fb04$export$fc9afd948577f0a8)(input, scheduler);\n        if ((0, $7c74d6a5e2273447$export$edb10ab8dd75a915)(input)) return (0, $d2627b52a3f1ff1b$export$7c7f0979b56a32f3)(input, scheduler);\n        if ((0, $b8a13650b96f19ab$export$9652023d9040757)(input)) return (0, $3a22bf76b9b6de63$export$2b75c58ab9b5b766)(input, scheduler);\n        if ((0, $54b99b9095e84ce4$export$c088ffafdba7405f)(input)) return (0, $7999ea1c5b71ad25$export$3385251aeecad28a)(input, scheduler);\n    }\n    throw (0, $d63b3f5b704e6de4$export$7cbe71b9fa263484)(input);\n}\n\n\n\nfunction $2fe2b696577919a5$export$6788812c4e6611e6(input, scheduler) {\n    return scheduler ? (0, $8f2bbfa9b5105688$export$49c44dfc2bb21d70)(input, scheduler) : (0, $1dc2e2cd8f7c5351$export$6a9cfa3ebc765910)(input);\n}\n\n\nfunction $82eda875fdd470db$export$ee1b3e54f0441b22() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];\n    return (0, $3a4e37c3b56570cb$export$b314777ae20abca9)()((0, $2fe2b696577919a5$export$6788812c4e6611e6)(args, (0, $3b29c258456d9a89$export$29534b2f653ae592)(args)));\n}\n\n\n\n\nfunction $b52129d9072c7912$export$a4fe86229b0e9bdd() {\n    var values = [];\n    for(var _i = 0; _i < arguments.length; _i++)values[_i] = arguments[_i];\n    var scheduler = (0, $3b29c258456d9a89$export$29534b2f653ae592)(values);\n    return (0, $992c4a42843eb1d0$export$871731df685d7753)(function(source, subscriber) {\n        (scheduler ? (0, $82eda875fdd470db$export$ee1b3e54f0441b22)(values, source, scheduler) : (0, $82eda875fdd470db$export$ee1b3e54f0441b22)(values, source)).subscribe(subscriber);\n    });\n}\n\n\n\n\n\n\n\n\nfunction $ada720f14bd5f844$export$d449030e5c10edf7() {\n    var inputs = [];\n    for(var _i = 0; _i < arguments.length; _i++)inputs[_i] = arguments[_i];\n    var project = (0, $3b29c258456d9a89$export$9ae19b645239a61b)(inputs);\n    return (0, $992c4a42843eb1d0$export$871731df685d7753)(function(source, subscriber) {\n        var len = inputs.length;\n        var otherValues = new Array(len);\n        var hasValue = inputs.map(function() {\n            return false;\n        });\n        var ready = false;\n        var _loop_1 = function(i) {\n            (0, $1dc2e2cd8f7c5351$export$6a9cfa3ebc765910)(inputs[i]).subscribe((0, $3868f035248205c1$export$b9e075132cc6937f)(subscriber, function(value) {\n                otherValues[i] = value;\n                if (!ready && !hasValue[i]) {\n                    hasValue[i] = true;\n                    (ready = hasValue.every((0, $7569c528cdd9d182$export$f0954fd7d5368655))) && (hasValue = null);\n                }\n            }, (0, $528e75db69787807$export$8793edee2d425525)));\n        };\n        for(var i = 0; i < len; i++)_loop_1(i);\n        source.subscribe((0, $3868f035248205c1$export$b9e075132cc6937f)(subscriber, function(value) {\n            if (ready) {\n                var values = (0, $5c96a02c592fcff1$export$1216008129fb82ed)([\n                    value\n                ], (0, $5c96a02c592fcff1$export$8d051b38c9118094)(otherValues));\n                subscriber.next(project ? project.apply(void 0, (0, $5c96a02c592fcff1$export$1216008129fb82ed)([], (0, $5c96a02c592fcff1$export$8d051b38c9118094)(values))) : values);\n            }\n        }));\n    });\n}\n\n\n\n\n\nfunction $2fbcbd7f7704e649$export$9f6ea8e48bc26eab(project, resultSelector) {\n    return (0, $992c4a42843eb1d0$export$871731df685d7753)(function(source, subscriber) {\n        var innerSubscriber = null;\n        var index = 0;\n        var isComplete = false;\n        var checkComplete = function() {\n            return isComplete && !innerSubscriber && subscriber.complete();\n        };\n        source.subscribe((0, $3868f035248205c1$export$b9e075132cc6937f)(subscriber, function(value) {\n            innerSubscriber === null || innerSubscriber === void 0 || innerSubscriber.unsubscribe();\n            var innerIndex = 0;\n            var outerIndex = index++;\n            (0, $1dc2e2cd8f7c5351$export$6a9cfa3ebc765910)(project(value, outerIndex)).subscribe(innerSubscriber = (0, $3868f035248205c1$export$b9e075132cc6937f)(subscriber, function(innerValue) {\n                return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);\n            }, function() {\n                innerSubscriber = null;\n                checkComplete();\n            }));\n        }, function() {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n\n\n\n\n\nfunction $e890d5c5b4491f33$export$ac8dfd3a7ad06e80(notifier) {\n    return (0, $992c4a42843eb1d0$export$871731df685d7753)(function(source, subscriber) {\n        (0, $1dc2e2cd8f7c5351$export$6a9cfa3ebc765910)(notifier).subscribe((0, $3868f035248205c1$export$b9e075132cc6937f)(subscriber, function() {\n            return subscriber.complete();\n        }, (0, $528e75db69787807$export$8793edee2d425525)));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n\n\n\nconst $b4e14b6b8da86996$var$root = document.getElementById(\"app\");\nconst $b4e14b6b8da86996$var$slider = document.createElement(\"div\");\n$b4e14b6b8da86996$var$slider.classList.add(\"slider\");\nconst $b4e14b6b8da86996$var$pin = document.createElement(\"div\");\n$b4e14b6b8da86996$var$pin.classList.add(\"pin\");\n$b4e14b6b8da86996$var$slider.append($b4e14b6b8da86996$var$pin);\n$b4e14b6b8da86996$var$root.append($b4e14b6b8da86996$var$slider);\nconst $b4e14b6b8da86996$var$from = 20;\nconst $b4e14b6b8da86996$var$to = 200;\nconst $b4e14b6b8da86996$var$step = 20;\nlet $b4e14b6b8da86996$var$sliderWidth;\n$b4e14b6b8da86996$var$createNotches();\n$b4e14b6b8da86996$var$createDragNDrop();\nfunction $b4e14b6b8da86996$var$createNotches() {\n    const notches = document.createElement(\"div\");\n    notches.classList.add(\"notches\");\n    $b4e14b6b8da86996$var$slider.append(notches);\n    for(let i = $b4e14b6b8da86996$var$from; i <= $b4e14b6b8da86996$var$to; i = i + $b4e14b6b8da86996$var$step){\n        const notch = document.createElement(\"div\");\n        notch.classList.add(\"notch\");\n        notches.append(notch);\n    }\n}\n/** \r\n * Сорри, тут будет сложно, написал на rxjs, \r\n * потому что терпеть не могу такое писать нативно \r\n **/ function $b4e14b6b8da86996$var$createDragNDrop() {\n    const resize$ = (0, $f65a851e0b190f66$export$a36e16046ae8f1bb)(window, \"resize\").pipe((0, $b52129d9072c7912$export$a4fe86229b0e9bdd)(1));\n    // Динамические оффсет и ширина\n    const offset$ = resize$.pipe((0, $9853a79d111e4e33$export$871de8747c9eaa88)(()=>$b4e14b6b8da86996$var$slider.offsetLeft));\n    const width$ = resize$.pipe((0, $9853a79d111e4e33$export$871de8747c9eaa88)(()=>$b4e14b6b8da86996$var$slider.clientWidth), (0, $9853a79d111e4e33$export$871de8747c9eaa88)((v)=>v - 2));\n    // У меня есть событие mousedown, mousemove, mouseup\n    const mousedown$ = (0, $f65a851e0b190f66$export$a36e16046ae8f1bb)($b4e14b6b8da86996$var$slider, \"mousedown\");\n    const mousemove$ = (0, $f65a851e0b190f66$export$a36e16046ae8f1bb)(window, \"mousemove\");\n    const mouseup$ = (0, $f65a851e0b190f66$export$a36e16046ae8f1bb)(window, \"mouseup\");\n    // При нажатии на mousedown я должен начать слушать mousemove\n    const drag$ = mousedown$.pipe(// Но при событии mouseup прекратить слушать mousemove\n    (0, $2fbcbd7f7704e649$export$9f6ea8e48bc26eab)(()=>mousemove$.pipe((0, $e890d5c5b4491f33$export$ac8dfd3a7ad06e80)(mouseup$))));\n    drag$.pipe((0, $ada720f14bd5f844$export$d449030e5c10edf7)(offset$, width$), // Меряем, делаем движение по отчечкам, отсекаем мин и макс\n    (0, $9853a79d111e4e33$export$871de8747c9eaa88)(([e, offset, width])=>{\n        const position = e.clientX - offset;\n        const notchCount = width / (($b4e14b6b8da86996$var$to - $b4e14b6b8da86996$var$from) / $b4e14b6b8da86996$var$step);\n        let results = Math.round(position / notchCount) * notchCount;\n        results = Math.max(0, results);\n        results = Math.min(width, results);\n        return results;\n    }))// Обновляем положение пина\n    .subscribe((pos)=>{\n        console.log(pos);\n        $b4e14b6b8da86996$var$pin.style.transform = `translate(${pos}px)`;\n    });\n}\n\n\n//# sourceMappingURL=index.ba2fa3db.js.map\n","import { fromEvent, startWith, withLatestFrom } from 'rxjs';  \r\nimport { map, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\n// Import stylesheets\r\nimport './style.css';\r\nconst root = document.getElementById('app');\r\nconst slider = document.createElement('div');\r\nslider.classList.add('slider');\r\nconst pin = document.createElement('div');\r\npin.classList.add('pin');\r\nslider.append(pin);\r\nroot.append(slider);\r\n\r\nconst from = 20;\r\nconst to = 200;\r\nconst step = 20;\r\nlet sliderWidth: number;\r\n\r\ncreateNotches();\r\ncreateDragNDrop();\r\n\r\nfunction createNotches() {\r\n  const notches = document.createElement('div');\r\n  notches.classList.add('notches');\r\n  slider.append(notches);\r\n  for (let i = from; i <= to; i = i+step) {\r\n    const notch = document.createElement('div');\r\n    notch.classList.add('notch');\r\n    notches.append(notch);\r\n  } \r\n}\r\n\r\n\r\n/** \r\n * Сорри, тут будет сложно, написал на rxjs, \r\n * потому что терпеть не могу такое писать нативно \r\n **/\r\nfunction createDragNDrop() {\r\n  const resize$ = fromEvent(window, 'resize').pipe(startWith(1));\r\n\r\n  // Динамические оффсет и ширина\r\n  const offset$ = resize$.pipe(map(() => slider.offsetLeft));\r\n  const width$ = resize$.pipe(map(() => slider.clientWidth), map(v => v - 2));\r\n\r\n  // У меня есть событие mousedown, mousemove, mouseup\r\n  const mousedown$ = fromEvent<MouseEvent>(slider, 'mousedown');\r\n  const mousemove$ = fromEvent<MouseEvent>(window, 'mousemove');\r\n  const mouseup$ = fromEvent<MouseEvent>(window, 'mouseup');\r\n  \r\n  // При нажатии на mousedown я должен начать слушать mousemove\r\n  const drag$ = mousedown$.pipe(\r\n    // Но при событии mouseup прекратить слушать mousemove\r\n    switchMap(() => mousemove$.pipe(takeUntil(mouseup$))),\r\n  );\r\n\r\n  drag$.pipe(\r\n    withLatestFrom(offset$, width$), \r\n    // Меряем, делаем движение по отчечкам, отсекаем мин и макс\r\n    map(([e, offset, width]) => {\r\n      const position = e.clientX - offset;\r\n      const notchCount = width / ((to - from) / step );\r\n      let results = Math.round(position / notchCount) * notchCount;\r\n      results = Math.max(0, results);\r\n      results = Math.min(width, results);\r\n\r\n      return results;\r\n    })\r\n  )\r\n  // Обновляем положение пина\r\n  .subscribe((pos) => {\r\n    console.log(pos);\r\n    pin.style.transform = `translate(${pos}px)`;\r\n  });\r\n\r\n}","import { __read } from \"tslib\";\nimport { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nvar nodeEventEmitterMethods = ['addListener', 'removeListener'];\nvar eventTargetMethods = ['addEventListener', 'removeEventListener'];\nvar jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    var _a = __read(isEventTarget(target)\n        ? eventTargetMethods.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [], 2), add = _a[0], remove = _a[1];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap(function (subTarget) { return fromEvent(subTarget, eventName, options); })(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable(function (subscriber) {\n        var handler = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return subscriber.next(1 < args.length ? args : args[0]);\n        };\n        add(handler);\n        return function () { return remove(handler); };\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n//# sourceMappingURL=fromEvent.js.map","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\n\n// These constants are used to create handler registry functions using array mapping below.\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'] as const;\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'] as const;\nconst jqueryMethods = ['on', 'off'] as const;\n\nexport interface NodeStyleEventEmitter {\n  addListener(eventName: string | symbol, handler: NodeEventHandler): this;\n  removeListener(eventName: string | symbol, handler: NodeEventHandler): this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener(eventName: string, handler: NodeEventHandler): void | {};\n  removeListener(eventName: string, handler: NodeEventHandler): void | {};\n}\n\n// Use handler types like those in @types/jquery. See:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/847731ba1d7fa6db6b911c0e43aa0afe596e7723/types/jquery/misc.d.ts#L6395\nexport interface JQueryStyleEventEmitter<TContext, T> {\n  on(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n  off(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n}\n\nexport interface EventListenerObject<E> {\n  handleEvent(evt: E): void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: EventListenerOptions | boolean\n  ): void;\n}\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\nexport function fromEvent<T>(target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>, eventName: string): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  resultSelector: (event: T) => R\n): Observable<R>;\nexport function fromEvent<T>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions,\n  resultSelector: (event: T) => R\n): Observable<R>;\n\nexport function fromEvent(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string\n): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent<T>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string,\n  resultSelector: (value: T, ...args: any[]) => R\n): Observable<R>;\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * ![](fromEvent.png)\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n *\n * Emit clicks happening on the DOM document\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * Use `addEventListener` with capture option\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * // note optional configuration parameter which will be passed to addEventListener\n * const clicksInDocument = fromEvent(document, 'click', { capture: true });\n * const clicksInDiv = fromEvent(div, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n */\nexport function fromEvent<T>(\n  target: any,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: (...args: any[]) => T\n): Observable<T> {\n  if (isFunction(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    return fromEvent<T>(target, eventName, options as EventListenerOptions).pipe(mapOneOrManyArgs(resultSelector));\n  }\n\n  // Figure out our add and remove methods. In order to do this,\n  // we are going to analyze the target in a preferred order, if\n  // the target matches a given signature, we take the two \"add\" and \"remove\"\n  // method names and apply them to a map to create opposite versions of the\n  // same function. This is because they all operate in duplicate pairs,\n  // `addListener(name, handler)`, `removeListener(name, handler)`, for example.\n  // The call only differs by method name, as to whether or not you're adding or removing.\n  const [add, remove] =\n    // If it is an EventTarget, we need to use a slightly different method than the other two patterns.\n    isEventTarget(target)\n      ? eventTargetMethods.map((methodName) => (handler: any) => target[methodName](eventName, handler, options as EventListenerOptions))\n      : // In all other cases, the call pattern is identical with the exception of the method names.\n      isNodeStyleEventEmitter(target)\n      ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n      : isJQueryStyleEventEmitter(target)\n      ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n      : [];\n\n  // If add is falsy, it's because we didn't match a pattern above.\n  // Check to see if it is an ArrayLike, because if it is, we want to\n  // try to apply fromEvent to all of it's items. We do this check last,\n  // because there are may be some types that are both ArrayLike *and* implement\n  // event registry points, and we'd rather delegate to that when possible.\n  if (!add) {\n    if (isArrayLike(target)) {\n      return mergeMap((subTarget: any) => fromEvent(subTarget, eventName, options as EventListenerOptions))(\n        innerFrom(target)\n      ) as Observable<T>;\n    }\n  }\n\n  // If add is falsy and we made it here, it's because we didn't\n  // match any valid target objects above.\n  if (!add) {\n    throw new TypeError('Invalid event target');\n  }\n\n  return new Observable<T>((subscriber) => {\n    // The handler we are going to register. Forwards the event object, by itself, or\n    // an array of arguments to the event handler, if there is more than one argument,\n    // to the consumer.\n    const handler = (...args: any[]) => subscriber.next(1 < args.length ? args : args[0]);\n    // Do the work of adding the handler to the target.\n    add(handler);\n    // When we finalize, we want to remove the handler and free up memory.\n    return () => remove!(handler);\n  });\n}\n\n/**\n * Used to create `add` and `remove` functions to register and unregister event handlers\n * from a target in the most common handler pattern, where there are only two arguments.\n * (e.g.  `on(name, fn)`, `off(name, fn)`, `addListener(name, fn)`, or `removeListener(name, fn)`)\n * @param target The target we're calling methods on\n * @param eventName The event name for the event we're creating register or unregister functions for\n */\nfunction toCommonHandlerRegistry(target: any, eventName: string) {\n  return (methodName: string) => (handler: any) => target[methodName](eventName, handler);\n}\n\n/**\n * Checks to see if the target implements the required node-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isNodeStyleEventEmitter(target: any): target is NodeStyleEventEmitter {\n  return isFunction(target.addListener) && isFunction(target.removeListener);\n}\n\n/**\n * Checks to see if the target implements the required jQuery-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isJQueryStyleEventEmitter(target: any): target is JQueryStyleEventEmitter<any, any> {\n  return isFunction(target.on) && isFunction(target.off);\n}\n\n/**\n * Checks to see if the target implements the required EventTarget methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isEventTarget(target: any): target is HasEventTargetAddRemove<any> {\n  return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport default {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __createBinding,\r\n    __exportStar,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __spreadArray,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n    __classPrivateFieldIn,\r\n};\r\n","import { __asyncValues, __awaiter, __generator, __values } from \"tslib\";\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function innerFrom(input) {\n    if (input instanceof Observable) {\n        return input;\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromInteropObservable(input);\n        }\n        if (isArrayLike(input)) {\n            return fromArrayLike(input);\n        }\n        if (isPromise(input)) {\n            return fromPromise(input);\n        }\n        if (isAsyncIterable(input)) {\n            return fromAsyncIterable(input);\n        }\n        if (isIterable(input)) {\n            return fromIterable(input);\n        }\n        if (isReadableStreamLike(input)) {\n            return fromReadableStreamLike(input);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\nexport function fromInteropObservable(obj) {\n    return new Observable(function (subscriber) {\n        var obs = obj[Symbol_observable]();\n        if (isFunction(obs.subscribe)) {\n            return obs.subscribe(subscriber);\n        }\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    });\n}\nexport function fromArrayLike(array) {\n    return new Observable(function (subscriber) {\n        for (var i = 0; i < array.length && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        subscriber.complete();\n    });\n}\nexport function fromPromise(promise) {\n    return new Observable(function (subscriber) {\n        promise\n            .then(function (value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function (err) { return subscriber.error(err); })\n            .then(null, reportUnhandledError);\n    });\n}\nexport function fromIterable(iterable) {\n    return new Observable(function (subscriber) {\n        var e_1, _a;\n        try {\n            for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {\n                var value = iterable_1_1.value;\n                subscriber.next(value);\n                if (subscriber.closed) {\n                    return;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        subscriber.complete();\n    });\n}\nexport function fromAsyncIterable(asyncIterable) {\n    return new Observable(function (subscriber) {\n        process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });\n    });\n}\nexport function fromReadableStreamLike(readableStream) {\n    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\nfunction process(asyncIterable, subscriber) {\n    var asyncIterable_1, asyncIterable_1_1;\n    var e_2, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var value, e_2_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _b.trys.push([0, 5, 6, 11]);\n                    asyncIterable_1 = __asyncValues(asyncIterable);\n                    _b.label = 1;\n                case 1: return [4, asyncIterable_1.next()];\n                case 2:\n                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];\n                    value = asyncIterable_1_1.value;\n                    subscriber.next(value);\n                    if (subscriber.closed) {\n                        return [2];\n                    }\n                    _b.label = 3;\n                case 3: return [3, 1];\n                case 4: return [3, 11];\n                case 5:\n                    e_2_1 = _b.sent();\n                    e_2 = { error: e_2_1 };\n                    return [3, 11];\n                case 6:\n                    _b.trys.push([6, , 9, 10]);\n                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];\n                    return [4, _a.call(asyncIterable_1)];\n                case 7:\n                    _b.sent();\n                    _b.label = 8;\n                case 8: return [3, 10];\n                case 9:\n                    if (e_2) throw e_2.error;\n                    return [7];\n                case 10: return [7];\n                case 11:\n                    subscriber.complete();\n                    return [2];\n            }\n        });\n    });\n}\n//# sourceMappingURL=innerFrom.js.map","import { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { ObservableInput, ObservedValueOf, ReadableStreamLike } from '../types';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { Subscriber } from '../Subscriber';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function innerFrom<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\nexport function innerFrom<T>(input: ObservableInput<T>): Observable<T> {\n  if (input instanceof Observable) {\n    return input;\n  }\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\n/**\n * Creates an RxJS Observable from an object that implements `Symbol.observable`.\n * @param obj An object that properly implements `Symbol.observable`.\n */\nexport function fromInteropObservable<T>(obj: any) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    const obs = obj[Symbol_observable]();\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\n\n/**\n * Synchronously emits the values of an array like and completes.\n * This is exported because there are creation functions and operators that need to\n * make direct use of the same logic, and there's no reason to make them run through\n * `from` conditionals because we *know* they're dealing with an array.\n * @param array The array to emit values from\n */\nexport function fromArrayLike<T>(array: ArrayLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    // Loop over the array and emit each value. Note two things here:\n    // 1. We're making sure that the subscriber is not closed on each loop.\n    //    This is so we don't continue looping over a very large array after\n    //    something like a `take`, `takeWhile`, or other synchronous unsubscription\n    //    has already unsubscribed.\n    // 2. In this form, reentrant code can alter that array we're looping over.\n    //    This is a known issue, but considered an edge case. The alternative would\n    //    be to copy the array before executing the loop, but this has\n    //    performance implications.\n    for (let i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromPromise<T>(promise: PromiseLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    promise\n      .then(\n        (value) => {\n          if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n          }\n        },\n        (err: any) => subscriber.error(err)\n      )\n      .then(null, reportUnhandledError);\n  });\n}\n\nexport function fromIterable<T>(iterable: Iterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    for (const value of iterable) {\n      subscriber.next(value);\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromAsyncIterable<T>(asyncIterable: AsyncIterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));\n  });\n}\n\nexport function fromReadableStreamLike<T>(readableStream: ReadableStreamLike<T>) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nasync function process<T>(asyncIterable: AsyncIterable<T>, subscriber: Subscriber<T>) {\n  for await (const value of asyncIterable) {\n    subscriber.next(value);\n    // A side-effect may have closed our subscriber,\n    // check before the next iteration.\n    if (subscriber.closed) {\n      return;\n    }\n  }\n  subscriber.complete();\n}\n","export var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n//# sourceMappingURL=isArrayLike.js.map","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');","import { isFunction } from \"./isFunction\";\nexport function isPromise(value) {\n    return isFunction(value === null || value === void 0 ? void 0 : value.then);\n}\n//# sourceMappingURL=isPromise.js.map","import { isFunction } from \"./isFunction\";\n\n/**\n * Tests to see if the object is \"thennable\".\n * @param value the object to test\n */\nexport function isPromise(value: any): value is PromiseLike<any> {\n  return isFunction(value?.then);\n}\n","export function isFunction(value) {\n    return typeof value === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","/**\n * Returns true if the object is a function.\n * @param value The value to check\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n","import { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription } from './Subscription';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\nvar Observable = (function () {\n    function Observable(subscribe) {\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var _this = this;\n        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n        errorContext(function () {\n            var _a = _this, operator = _a.operator, source = _a.source;\n            subscriber.add(operator\n                ?\n                    operator.call(subscriber, source)\n                : source\n                    ?\n                        _this._subscribe(subscriber)\n                    :\n                        _this._trySubscribe(subscriber));\n        });\n        return subscriber;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.error(err);\n        }\n    };\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var subscriber = new SafeSubscriber({\n                next: function (value) {\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscriber.unsubscribe();\n                    }\n                },\n                error: reject,\n                complete: resolve,\n            });\n            _this.subscribe(subscriber);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        var _a;\n        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n    };\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        return pipeFromArray(operations)(this);\n    };\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\nfunction getPromiseCtor(promiseCtor) {\n    var _a;\n    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;\n}\nfunction isObserver(value) {\n    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\nfunction isSubscriber(value) {\n    return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n//# sourceMappingURL=Observable.js.map","import { Operator } from './Operator';\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription, Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  source: Observable<any> | undefined;\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  operator: Operator<any, T> | undefined;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new Observable by calling the Observable constructor\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new observable\n   * @nocollapse\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\n   */\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable instance as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param operator the operator defining the operation to take on the observable\n   * @return a new observable with the Operator applied\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * If you have implemented an operator using `lift`, it is recommended that you create an\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\n   * scratch\" section here: https://rxjs.dev/guide/operators\n   */\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observerOrNext?: Partial<Observer<T>> | ((value: T) => void)): Subscription;\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\n   * an `error` method to avoid missing thrown errors.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\n   *\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * #### Examples\n   *\n   * Subscribe with an {@link guide/observer Observer}\n   *\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Subscribe with functions ({@link deprecations/subscribe-arguments deprecated})\n   *\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Cancel a subscription\n   *\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe({\n   *   next(num) {\n   *     console.log(num)\n   *   },\n   *   complete() {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * });\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // 'unsubscribed!' after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   * or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   * Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   * the error will be thrown asynchronously as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {Subscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n\n    errorContext(() => {\n      const { operator, source } = this;\n      subscriber.add(\n        operator\n          ? // We're dealing with a subscription in the\n            // operator chain to one of our lifted operators.\n            operator.call(subscriber, source)\n          : source\n          ? // If `source` has a value, but `operator` does not, something that\n            // had intimate knowledge of our API, like our `Subject`, must have\n            // set it. We're going to just call `_subscribe` directly.\n            this._subscribe(subscriber)\n          : // In all other cases, we're likely wrapping a user-provided initializer\n            // function, so we need to catch errors and handle them appropriately.\n            this._trySubscribe(subscriber)\n      );\n    });\n\n    return subscriber;\n  }\n\n  /** @internal */\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      // We don't need to return anything in this case,\n      // because it's just going to try to `add()` to a subscription\n      // above.\n      sink.error(err);\n    }\n  }\n\n  /**\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * #### Example\n   *\n   * ```ts\n   * import { interval, take } from 'rxjs';\n   *\n   * const source$ = interval(1000).pipe(take(4));\n   *\n   * async function getTotal() {\n   *   let total = 0;\n   *\n   *   await source$.forEach(value => {\n   *     total += value;\n   *     console.log('observable -> ' + value);\n   *   });\n   *\n   *   return total;\n   * }\n   *\n   * getTotal().then(\n   *   total => console.log('Total: ' + total)\n   * );\n   *\n   * // Expected:\n   * // 'observable -> 0'\n   * // 'observable -> 1'\n   * // 'observable -> 2'\n   * // 'observable -> 3'\n   * // 'Total: 6'\n   * ```\n   *\n   * @param next a handler for each value emitted by the observable\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void): Promise<void>;\n\n  /**\n   * @param next a handler for each value emitted by the observable\n   * @param promiseCtor a constructor function used to instantiate the Promise\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   * @deprecated Passing a Promise constructor will no longer be available\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\n   * little benefit. If you need this functionality, it is recommended that you either\n   * polyfill Promise, or you create an adapter to convert the returned native promise\n   * to whatever promise implementation you wanted. Will be removed in v8.\n   */\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\n\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      const subscriber = new SafeSubscriber<T>({\n        next: (value) => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscriber.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve,\n      });\n      this.subscribe(subscriber);\n    }) as Promise<void>;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source?.subscribe(subscriber);\n  }\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { interval, filter, map, scan } from 'rxjs';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x));\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Subscribe to this Observable and get a Promise resolving on\n   * `complete` with the last emission (if any).\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * @method toPromise\n   * @param [promiseCtor] a constructor function used to instantiate\n   * the Promise\n   * @return A Promise that resolves with the last value emit, or\n   * rejects on an error. If there were no emissions, Promise\n   * resolves with undefined.\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise\n   */\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: T | undefined;\n      this.subscribe(\n        (x: T) => (value = x),\n        (err: any) => reject(err),\n        () => resolve(value)\n      );\n    }) as Promise<T | undefined>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  return promiseCtor ?? config.Promise ?? Promise;\n}\n\nfunction isObserver<T>(value: any): value is Observer<T> {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n","import { __extends } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    function Subscriber(destination) {\n        var _this = _super.call(this) || this;\n        _this.isStopped = false;\n        if (destination) {\n            _this.destination = destination;\n            if (isSubscription(destination)) {\n                destination.add(_this);\n            }\n        }\n        else {\n            _this.destination = EMPTY_OBSERVER;\n        }\n        return _this;\n    }\n    Subscriber.create = function (next, error, complete) {\n        return new SafeSubscriber(next, error, complete);\n    };\n    Subscriber.prototype.next = function (value) {\n        if (this.isStopped) {\n            handleStoppedNotification(nextNotification(value), this);\n        }\n        else {\n            this._next(value);\n        }\n    };\n    Subscriber.prototype.error = function (err) {\n        if (this.isStopped) {\n            handleStoppedNotification(errorNotification(err), this);\n        }\n        else {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function () {\n        if (this.isStopped) {\n            handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n        }\n        else {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.isStopped = true;\n            _super.prototype.unsubscribe.call(this);\n            this.destination = null;\n        }\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        try {\n            this.destination.error(err);\n        }\n        finally {\n            this.unsubscribe();\n        }\n    };\n    Subscriber.prototype._complete = function () {\n        try {\n            this.destination.complete();\n        }\n        finally {\n            this.unsubscribe();\n        }\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\nvar _bind = Function.prototype.bind;\nfunction bind(fn, thisArg) {\n    return _bind.call(fn, thisArg);\n}\nvar ConsumerObserver = (function () {\n    function ConsumerObserver(partialObserver) {\n        this.partialObserver = partialObserver;\n    }\n    ConsumerObserver.prototype.next = function (value) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.next) {\n            try {\n                partialObserver.next(value);\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n    };\n    ConsumerObserver.prototype.error = function (err) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.error) {\n            try {\n                partialObserver.error(err);\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n        else {\n            handleUnhandledError(err);\n        }\n    };\n    ConsumerObserver.prototype.complete = function () {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.complete) {\n            try {\n                partialObserver.complete();\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n    };\n    return ConsumerObserver;\n}());\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        var partialObserver;\n        if (isFunction(observerOrNext) || !observerOrNext) {\n            partialObserver = {\n                next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),\n                error: error !== null && error !== void 0 ? error : undefined,\n                complete: complete !== null && complete !== void 0 ? complete : undefined,\n            };\n        }\n        else {\n            var context_1;\n            if (_this && config.useDeprecatedNextContext) {\n                context_1 = Object.create(observerOrNext);\n                context_1.unsubscribe = function () { return _this.unsubscribe(); };\n                partialObserver = {\n                    next: observerOrNext.next && bind(observerOrNext.next, context_1),\n                    error: observerOrNext.error && bind(observerOrNext.error, context_1),\n                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),\n                };\n            }\n            else {\n                partialObserver = observerOrNext;\n            }\n        }\n        _this.destination = new ConsumerObserver(partialObserver);\n        return _this;\n    }\n    return SafeSubscriber;\n}(Subscriber));\nexport { SafeSubscriber };\nfunction handleUnhandledError(error) {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n        captureError(error);\n    }\n    else {\n        reportUnhandledError(error);\n    }\n}\nfunction defaultErrorHandler(err) {\n    throw err;\n}\nfunction handleStoppedNotification(notification, subscriber) {\n    var onStoppedNotification = config.onStoppedNotification;\n    onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });\n}\nexport var EMPTY_OBSERVER = {\n    closed: true,\n    next: noop,\n    error: defaultErrorHandler,\n    complete: noop,\n};\n//# sourceMappingURL=Subscriber.js.map","import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\n/**\n * This bind is captured here because we want to be able to have\n * compatibility with monoid libraries that tend to use a method named\n * `bind`. In particular, a library called Monio requires this.\n */\nconst _bind = Function.prototype.bind;\n\nfunction bind<Fn extends (...args: any[]) => any>(fn: Fn, thisArg: any): Fn {\n  return _bind.call(fn, thisArg);\n}\n\n/**\n * Internal optimization only, DO NOT EXPOSE.\n * @internal\n */\nclass ConsumerObserver<T> implements Observer<T> {\n  constructor(private partialObserver: Partial<Observer<T>>) {}\n\n  next(value: T): void {\n    const { partialObserver } = this;\n    if (partialObserver.next) {\n      try {\n        partialObserver.next(value);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n\n  error(err: any): void {\n    const { partialObserver } = this;\n    if (partialObserver.error) {\n      try {\n        partialObserver.error(err);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    } else {\n      handleUnhandledError(err);\n    }\n  }\n\n  complete(): void {\n    const { partialObserver } = this;\n    if (partialObserver.complete) {\n      try {\n        partialObserver.complete();\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let partialObserver: Partial<Observer<T>>;\n    if (isFunction(observerOrNext) || !observerOrNext) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      partialObserver = {\n        next: (observerOrNext ?? undefined) as (((value: T) => void) | undefined),\n        error: error ?? undefined,\n        complete: complete ?? undefined,\n      };\n    } else {\n      // The first argument is a partial observer.\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n        partialObserver = {\n          next: observerOrNext.next && bind(observerOrNext.next, context),\n          error: observerOrNext.error && bind(observerOrNext.error, context),\n          complete: observerOrNext.complete && bind(observerOrNext.complete, context),\n        };\n      } else {\n        // The \"normal\" path. Just use the partial observer directly.\n        partialObserver = observerOrNext;\n      }\n    }\n\n    // Wrap the partial observer to ensure it's a full observer, and\n    // make sure proper error handling is accounted for.\n    this.destination = new ConsumerObserver(partialObserver);\n  }\n}\n\nfunction handleUnhandledError(error: any) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    captureError(error);\n  } else {\n    // Ideal path, we report this as an unhandled error,\n    // which is thrown on a new call stack.\n    reportUnhandledError(error);\n  }\n}\n\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent\n * @param subscriber The stopped subscriber\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n","import { __read, __spreadArray, __values } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { arrRemove } from './util/arrRemove';\nvar Subscription = (function () {\n    function Subscription(initialTeardown) {\n        this.initialTeardown = initialTeardown;\n        this.closed = false;\n        this._parentage = null;\n        this._finalizers = null;\n    }\n    Subscription.prototype.unsubscribe = function () {\n        var e_1, _a, e_2, _b;\n        var errors;\n        if (!this.closed) {\n            this.closed = true;\n            var _parentage = this._parentage;\n            if (_parentage) {\n                this._parentage = null;\n                if (Array.isArray(_parentage)) {\n                    try {\n                        for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {\n                            var parent_1 = _parentage_1_1.value;\n                            parent_1.remove(this);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                }\n                else {\n                    _parentage.remove(this);\n                }\n            }\n            var initialFinalizer = this.initialTeardown;\n            if (isFunction(initialFinalizer)) {\n                try {\n                    initialFinalizer();\n                }\n                catch (e) {\n                    errors = e instanceof UnsubscriptionError ? e.errors : [e];\n                }\n            }\n            var _finalizers = this._finalizers;\n            if (_finalizers) {\n                this._finalizers = null;\n                try {\n                    for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {\n                        var finalizer = _finalizers_1_1.value;\n                        try {\n                            execFinalizer(finalizer);\n                        }\n                        catch (err) {\n                            errors = errors !== null && errors !== void 0 ? errors : [];\n                            if (err instanceof UnsubscriptionError) {\n                                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));\n                            }\n                            else {\n                                errors.push(err);\n                            }\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n            if (errors) {\n                throw new UnsubscriptionError(errors);\n            }\n        }\n    };\n    Subscription.prototype.add = function (teardown) {\n        var _a;\n        if (teardown && teardown !== this) {\n            if (this.closed) {\n                execFinalizer(teardown);\n            }\n            else {\n                if (teardown instanceof Subscription) {\n                    if (teardown.closed || teardown._hasParent(this)) {\n                        return;\n                    }\n                    teardown._addParent(this);\n                }\n                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);\n            }\n        }\n    };\n    Subscription.prototype._hasParent = function (parent) {\n        var _parentage = this._parentage;\n        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _parentage = this._parentage;\n        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n    };\n    Subscription.prototype._removeParent = function (parent) {\n        var _parentage = this._parentage;\n        if (_parentage === parent) {\n            this._parentage = null;\n        }\n        else if (Array.isArray(_parentage)) {\n            arrRemove(_parentage, parent);\n        }\n    };\n    Subscription.prototype.remove = function (teardown) {\n        var _finalizers = this._finalizers;\n        _finalizers && arrRemove(_finalizers, teardown);\n        if (teardown instanceof Subscription) {\n            teardown._removeParent(this);\n        }\n    };\n    Subscription.EMPTY = (function () {\n        var empty = new Subscription();\n        empty.closed = true;\n        return empty;\n    })();\n    return Subscription;\n}());\nexport { Subscription };\nexport var EMPTY_SUBSCRIPTION = Subscription.EMPTY;\nexport function isSubscription(value) {\n    return (value instanceof Subscription ||\n        (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));\n}\nfunction execFinalizer(finalizer) {\n    if (isFunction(finalizer)) {\n        finalizer();\n    }\n    else {\n        finalizer.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscription.js.map","import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered finalizers to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _finalizers: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the finalization\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown: initialFinalizer } = this;\n      if (isFunction(initialFinalizer)) {\n        try {\n          initialFinalizer();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _finalizers } = this;\n      if (_finalizers) {\n        this._finalizers = null;\n        for (const finalizer of _finalizers) {\n          try {\n            execFinalizer(finalizer);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a finalizer to this subscription, so that finalization will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever finalizer is passed to it\n   * will automatically be executed (unless the finalizer itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as finalizers to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The finalization logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the finalizer if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever finalizer is handed to it automatically.\n        execFinalizer(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._finalizers = this._finalizers ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a finalizer from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same finalizer instance of a function or an unsubscribable object to a `Subscription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All finalizer instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The finalizer to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _finalizers } = this;\n    _finalizers && arrRemove(_finalizers, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execFinalizer(finalizer: Unsubscribable | (() => void)) {\n  if (isFunction(finalizer)) {\n    finalizer();\n  } else {\n    finalizer.unsubscribe();\n  }\n}\n","import { createErrorClass } from './createErrorClass';\nexport var UnsubscriptionError = createErrorClass(function (_super) {\n    return function UnsubscriptionErrorImpl(errors) {\n        _super(this);\n        this.message = errors\n            ? errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ')\n            : '';\n        this.name = 'UnsubscriptionError';\n        this.errors = errors;\n    };\n});\n//# sourceMappingURL=UnsubscriptionError.js.map","import { createErrorClass } from './createErrorClass';\n\nexport interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (errors: any[]): UnsubscriptionError;\n}\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(\n  (_super) =>\n    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {\n      _super(this);\n      this.message = errors\n        ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}`\n        : '';\n      this.name = 'UnsubscriptionError';\n      this.errors = errors;\n    }\n);\n","export function createErrorClass(createImpl) {\n    var _super = function (instance) {\n        Error.call(instance);\n        instance.stack = new Error().stack;\n    };\n    var ctorFunc = createImpl(_super);\n    ctorFunc.prototype = Object.create(Error.prototype);\n    ctorFunc.prototype.constructor = ctorFunc;\n    return ctorFunc;\n}\n//# sourceMappingURL=createErrorClass.js.map","/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n","export function arrRemove(arr, item) {\n    if (arr) {\n        var index = arr.indexOf(item);\n        0 <= index && arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=arrRemove.js.map","/**\n * Removes an item from an array, mutating it.\n * @param arr The array to remove the item from\n * @param item The item to remove\n */\nexport function arrRemove<T>(arr: T[] | undefined | null, item: T) {\n  if (arr) {\n    const index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n","export var config = {\n    onUnhandledError: null,\n    onStoppedNotification: null,\n    Promise: undefined,\n    useDeprecatedSynchronousErrorHandling: false,\n    useDeprecatedNextContext: false,\n};\n//# sourceMappingURL=config.js.map","import { Subscriber } from './Subscriber';\nimport { ObservableNotification } from './types';\n\n/**\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\n * like how to react on unhandled errors.\n */\nexport const config: GlobalConfig = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false,\n};\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like how to react on unhandled errors. Accessible via {@link config}\n * object.\n */\nexport interface GlobalConfig {\n  /**\n   * A registration point for unhandled errors from RxJS. These are errors that\n   * cannot were not handled by consuming code in the usual subscription path. For\n   * example, if you have this configured, and you subscribe to an observable without\n   * providing an error handler, errors from that subscription will end up here. This\n   * will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onUnhandledError: ((err: any) => void) | null;\n\n  /**\n   * A registration point for notifications that cannot be sent to subscribers because they\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\n   * might want a different behavior. For example, with sources that attempt to report errors\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\n\n  /**\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\n   * methods.\n   *\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\n   * Promise constructor. If you need a Promise implementation other than native promises,\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n   */\n  Promise?: PromiseConstructorLike;\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\n   * FOR MIGRATION REASONS.\n   *\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\n   * behaviors described above. Will be removed in v8.\n   */\n  useDeprecatedSynchronousErrorHandling: boolean;\n\n  /**\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\n   * to `subscribe`.\n   *\n   * This is being removed because the performance was severely problematic, and it could also cause\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\n   * their `this` context overwritten.\n   *\n   * @deprecated As of version 8, RxJS will no longer support altering the\n   * context of next functions provided as part of an observer to Subscribe. Instead,\n   * you will have access to a subscription or a signal or token that will allow you to do things like\n   * unsubscribe and test closed status. Will be removed in v8.\n   */\n  useDeprecatedNextContext: boolean;\n}\n","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\nexport function reportUnhandledError(err) {\n    timeoutProvider.setTimeout(function () {\n        var onUnhandledError = config.onUnhandledError;\n        if (onUnhandledError) {\n            onUnhandledError(err);\n        }\n        else {\n            throw err;\n        }\n    });\n}\n//# sourceMappingURL=reportUnhandledError.js.map","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n","import { __read, __spreadArray } from \"tslib\";\nexport var timeoutProvider = {\n    setTimeout: function (handler, timeout) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var delegate = timeoutProvider.delegate;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {\n            return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));\n        }\n        return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));\n    },\n    clearTimeout: function (handle) {\n        var delegate = timeoutProvider.delegate;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);\n    },\n    delegate: undefined,\n};\n//# sourceMappingURL=timeoutProvider.js.map","import type { TimerHandle } from './timerHandle';\ntype SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => TimerHandle;\ntype ClearTimeoutFunction = (handle: TimerHandle) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(handler: () => void, timeout?: number, ...args) {\n    const { delegate } = timeoutProvider;\n    if (delegate?.setTimeout) {\n      return delegate.setTimeout(handler, timeout, ...args);\n    }\n    return setTimeout(handler, timeout, ...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle as any);\n  },\n  delegate: undefined,\n};\n","export function noop() { }\n//# sourceMappingURL=noop.js.map","/* tslint:disable:no-empty */\nexport function noop() { }\n","export var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();\nexport function errorNotification(error) {\n    return createNotification('E', undefined, error);\n}\nexport function nextNotification(value) {\n    return createNotification('N', value, undefined);\n}\nexport function createNotification(kind, value, error) {\n    return {\n        kind: kind,\n        value: value,\n        error: error,\n    };\n}\n//# sourceMappingURL=NotificationFactories.js.map","import { CompleteNotification, NextNotification, ErrorNotification } from './types';\n\n/**\n * A completion object optimized for memory use and created to be the\n * same \"shape\" as other notifications in v8.\n * @internal\n */\nexport const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined) as CompleteNotification)();\n\n/**\n * Internal use only. Creates an optimized error notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function errorNotification(error: any): ErrorNotification {\n  return createNotification('E', undefined, error) as any;\n}\n\n/**\n * Internal use only. Creates an optimized next notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function nextNotification<T>(value: T) {\n  return createNotification('N', value, undefined) as NextNotification<T>;\n}\n\n/**\n * Ensures that all notifications created internally have the same \"shape\" in v8.\n *\n * TODO: This is only exported to support a crazy legacy test in `groupBy`.\n * @internal\n */\nexport function createNotification(kind: 'N' | 'E' | 'C', value: any, error: any) {\n  return {\n    kind,\n    value,\n    error,\n  };\n}\n","import { config } from '../config';\nvar context = null;\nexport function errorContext(cb) {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n        var isRoot = !context;\n        if (isRoot) {\n            context = { errorThrown: false, error: null };\n        }\n        cb();\n        if (isRoot) {\n            var _a = context, errorThrown = _a.errorThrown, error = _a.error;\n            context = null;\n            if (errorThrown) {\n                throw error;\n            }\n        }\n    }\n    else {\n        cb();\n    }\n}\nexport function captureError(err) {\n    if (config.useDeprecatedSynchronousErrorHandling && context) {\n        context.errorThrown = true;\n        context.error = err;\n    }\n}\n//# sourceMappingURL=errorContext.js.map","import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n","export var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();\n//# sourceMappingURL=observable.js.map","/**\n * Symbol.observable or a string \"@@observable\". Used for interop\n *\n * @deprecated We will no longer be exporting this symbol in upcoming versions of RxJS.\n * Instead polyfill and use Symbol.observable directly *or* use https://www.npmjs.com/package/symbol-observable\n */\nexport const observable: string | symbol = (() => (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();\n","import { identity } from './identity';\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","import { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\nexport function pipe(): typeof identity;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>\n): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>\n): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>\n): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>\n): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>\n): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>\n): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>,\n  ...fns: UnaryFunction<any, any>[]\n): UnaryFunction<T, unknown>;\n\n/**\n * pipe() can be called on one or more functions, each of which can take one argument (\"UnaryFunction\")\n * and uses it to return a value.\n * It returns a function that takes one argument, passes it to the first UnaryFunction, and then\n * passes the result to the next one, passes that result to the next one, and so on.  \n */\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","export function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map","/**\n * This function takes one parameter and just returns it. Simply put,\n * this is like `<T>(x: T): T => x`.\n *\n * ## Examples\n *\n * This is useful in some cases when using things like `mergeMap`\n *\n * ```ts\n * import { interval, take, map, range, mergeMap, identity } from 'rxjs';\n *\n * const source$ = interval(1000).pipe(take(5));\n *\n * const result$ = source$.pipe(\n *   map(i => range(i)),\n *   mergeMap(identity) // same as mergeMap(x => x)\n * );\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * Or when you want to selectively apply an operator\n *\n * ```ts\n * import { interval, take, identity } from 'rxjs';\n *\n * const shouldLimit = () => Math.random() < 0.5;\n *\n * const source$ = interval(1000);\n *\n * const result$ = source$.pipe(shouldLimit() ? take(5) : identity);\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * @param x Any value that is returned by this function\n * @returns The value passed as the first parameter to this function\n */\nexport function identity<T>(x: T): T {\n  return x;\n}\n","import { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\nexport function isInteropObservable(input) {\n    return isFunction(input[Symbol_observable]);\n}\n//# sourceMappingURL=isInteropObservable.js.map","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return isFunction(input[Symbol_observable]);\n}\n","import { isFunction } from './isFunction';\nexport function isAsyncIterable(obj) {\n    return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);\n}\n//# sourceMappingURL=isAsyncIterable.js.map","import { isFunction } from './isFunction';\n\nexport function isAsyncIterable<T>(obj: any): obj is AsyncIterable<T> {\n  return Symbol.asyncIterator && isFunction(obj?.[Symbol.asyncIterator]);\n}\n","export function createInvalidObservableTypeError(input) {\n    return new TypeError(\"You provided \" + (input !== null && typeof input === 'object' ? 'an invalid object' : \"'\" + input + \"'\") + \" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.\");\n}\n//# sourceMappingURL=throwUnobservableError.js.map","/**\n * Creates the TypeError to throw if an invalid object is passed to `from` or `scheduled`.\n * @param input The object that was passed.\n */\nexport function createInvalidObservableTypeError(input: any) {\n  // TODO: We should create error codes that can be looked up, so this can be less verbose.\n  return new TypeError(\n    `You provided ${\n      input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`\n    } where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`\n  );\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\nexport function isIterable(input) {\n    return isFunction(input === null || input === void 0 ? void 0 : input[Symbol_iterator]);\n}\n//# sourceMappingURL=isIterable.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return isFunction(input?.[Symbol_iterator]);\n}\n","export function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport var iterator = getSymbolIterator();\n//# sourceMappingURL=iterator.js.map","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n","import { __asyncGenerator, __await, __generator } from \"tslib\";\nimport { isFunction } from './isFunction';\nexport function readableStreamLikeToAsyncGenerator(readableStream) {\n    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {\n        var reader, _a, value, done;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    reader = readableStream.getReader();\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, , 9, 10]);\n                    _b.label = 2;\n                case 2:\n                    if (!true) return [3, 8];\n                    return [4, __await(reader.read())];\n                case 3:\n                    _a = _b.sent(), value = _a.value, done = _a.done;\n                    if (!done) return [3, 5];\n                    return [4, __await(void 0)];\n                case 4: return [2, _b.sent()];\n                case 5: return [4, __await(value)];\n                case 6: return [4, _b.sent()];\n                case 7:\n                    _b.sent();\n                    return [3, 2];\n                case 8: return [3, 10];\n                case 9:\n                    reader.releaseLock();\n                    return [7];\n                case 10: return [2];\n            }\n        });\n    });\n}\nexport function isReadableStreamLike(obj) {\n    return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);\n}\n//# sourceMappingURL=isReadableStreamLike.js.map","import { ReadableStreamLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport async function* readableStreamLikeToAsyncGenerator<T>(readableStream: ReadableStreamLike<T>): AsyncGenerator<T> {\n  const reader = readableStream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value!;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function isReadableStreamLike<T>(obj: any): obj is ReadableStreamLike<T> {\n  // We don't want to use instanceof checks because they would return\n  // false for instances from another Realm, like an <iframe>.\n  return isFunction(obj?.getReader);\n}\n","import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Infinity; }\n    if (isFunction(resultSelector)) {\n        return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });\n}\n//# sourceMappingURL=mergeMap.js.map","import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n *\n * Map and flatten each letter to an Observable ticking every 1 second\n *\n * ```ts\n * import { of, mergeMap, interval, map } from 'rxjs';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x + i)))\n * );\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a, b, c every second with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and merging\n * the results of the Observables obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    // DEPRECATED PATH\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate(function (source, subscriber) {\n        var index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n//# sourceMappingURL=map.js.map","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function map<T, R>(project: (value: T, index: number) => R): OperatorFunction<T, R>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function map<T, R, A>(project: (this: A, value: T, index: number) => R, thisArg: A): OperatorFunction<T, R>;\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n *\n * Map every click to the `clientX` position of that click\n *\n * ```ts\n * import { fromEvent, map } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n *\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return A function that returns an Observable that emits the values from the\n * source Observable transformed by the given `project` function.\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return operate((source, subscriber) => {\n    // The index of the value from the source. Used with projection.\n    let index = 0;\n    // Subscribe to the source, all errors and completions are sent along\n    // to the consumer.\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value: T) => {\n        // Call the projection function with the appropriate this context,\n        // and send the resulting value to the consumer.\n        subscriber.next(project.call(thisArg, value, index++));\n      })\n    );\n  });\n}\n","import { isFunction } from './isFunction';\nexport function hasLift(source) {\n    return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n    return function (source) {\n        if (hasLift(source)) {\n            return source.lift(function (liftedSource) {\n                try {\n                    return init(liftedSource, this);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            });\n        }\n        throw new TypeError('Unable to lift unknown Observable type');\n    };\n}\n//# sourceMappingURL=lift.js.map","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n","import { __extends } from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\nvar OperatorSubscriber = (function (_super) {\n    __extends(OperatorSubscriber, _super);\n    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n        var _this = _super.call(this, destination) || this;\n        _this.onFinalize = onFinalize;\n        _this.shouldUnsubscribe = shouldUnsubscribe;\n        _this._next = onNext\n            ? function (value) {\n                try {\n                    onNext(value);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n            }\n            : _super.prototype._next;\n        _this._error = onError\n            ? function (err) {\n                try {\n                    onError(err);\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : _super.prototype._error;\n        _this._complete = onComplete\n            ? function () {\n                try {\n                    onComplete();\n                }\n                catch (err) {\n                    destination.error(err);\n                }\n                finally {\n                    this.unsubscribe();\n                }\n            }\n            : _super.prototype._complete;\n        return _this;\n    }\n    OperatorSubscriber.prototype.unsubscribe = function () {\n        var _a;\n        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n            var closed_1 = this.closed;\n            _super.prototype.unsubscribe.call(this);\n            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n        }\n    };\n    return OperatorSubscriber;\n}(Subscriber));\nexport { OperatorSubscriber };\n//# sourceMappingURL=OperatorSubscriber.js.map","import { Subscriber } from '../Subscriber';\n\n/**\n * Creates an instance of an `OperatorSubscriber`.\n * @param destination The downstream subscriber.\n * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n * and send to the `destination` error handler.\n * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n * this handler are sent to the `destination` error handler.\n * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n */\nexport function createOperatorSubscriber<T>(\n  destination: Subscriber<any>,\n  onNext?: (value: T) => void,\n  onComplete?: () => void,\n  onError?: (err: any) => void,\n  onFinalize?: () => void\n): Subscriber<T> {\n  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional finalization logic here. This will only be called on finalization if the\n   * subscriber itself is not already closed. This is called after all other finalization logic is executed.\n   * @param shouldUnsubscribe An optional check to see if an unsubscribe call should truly unsubscribe.\n   * NOTE: This currently **ONLY** exists to support the strange behavior of {@link groupBy}, where unsubscription\n   * to the resulting observable does not actually disconnect from the source if there are active subscriptions\n   * to any grouped observable. (DO NOT EXPOSE OR USE EXTERNALLY!!!)\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void,\n    private shouldUnsubscribe?: () => boolean\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n      const { closed } = this;\n      super.unsubscribe();\n      // Execute additional teardown if we have any and we didn't already do so.\n      !closed && this.onFinalize?.();\n    }\n  }\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    var buffer = [];\n    var active = 0;\n    var index = 0;\n    var isComplete = false;\n    var checkComplete = function () {\n        if (isComplete && !buffer.length && !active) {\n            subscriber.complete();\n        }\n    };\n    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };\n    var doInnerSub = function (value) {\n        expand && subscriber.next(value);\n        active++;\n        var innerComplete = false;\n        innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {\n            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n            if (expand) {\n                outerNext(innerValue);\n            }\n            else {\n                subscriber.next(innerValue);\n            }\n        }, function () {\n            innerComplete = true;\n        }, undefined, function () {\n            if (innerComplete) {\n                try {\n                    active--;\n                    var _loop_1 = function () {\n                        var bufferedValue = buffer.shift();\n                        if (innerSubScheduler) {\n                            executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });\n                        }\n                        else {\n                            doInnerSub(bufferedValue);\n                        }\n                    };\n                    while (buffer.length && active < concurrent) {\n                        _loop_1();\n                    }\n                    checkComplete();\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }\n        }));\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {\n        isComplete = true;\n        checkComplete();\n    }));\n    return function () {\n        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n    };\n}\n//# sourceMappingURL=mergeInternals.js.map","import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A process embodying the general \"merge\" strategy. This is used in\n * `mergeMap` and `mergeScan` because the logic is otherwise nearly identical.\n * @param source The original source observable\n * @param subscriber The consumer subscriber\n * @param project The projection function to get our inner sources\n * @param concurrent The number of concurrent inner subscriptions\n * @param onBeforeNext Additional logic to apply before nexting to our consumer\n * @param expand If `true` this will perform an \"expand\" strategy, which differs only\n * in that it recurses, and the inner subscription must be schedule-able.\n * @param innerSubScheduler A scheduler to use to schedule inner subscriptions,\n * this is to support the expand strategy, mostly, and should be deprecated\n */\nexport function mergeInternals<T, R>(\n  source: Observable<T>,\n  subscriber: Subscriber<R>,\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number,\n  onBeforeNext?: (innerValue: R) => void,\n  expand?: boolean,\n  innerSubScheduler?: SchedulerLike,\n  additionalFinalizer?: () => void\n) {\n  // Buffered values, in the event of going over our concurrency limit\n  const buffer: T[] = [];\n  // The number of active inner subscriptions.\n  let active = 0;\n  // An index to pass to our accumulator function\n  let index = 0;\n  // Whether or not the outer source has completed.\n  let isComplete = false;\n\n  /**\n   * Checks to see if we can complete our result or not.\n   */\n  const checkComplete = () => {\n    // If the outer has completed, and nothing is left in the buffer,\n    // and we don't have any active inner subscriptions, then we can\n    // Emit the state and complete.\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  // If we're under our concurrency limit, just start the inner subscription, otherwise buffer and wait.\n  const outerNext = (value: T) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n\n  const doInnerSub = (value: T) => {\n    // If we're expanding, we need to emit the outer values and the inner values\n    // as the inners will \"become outers\" in a way as they are recursively fed\n    // back to the projection mechanism.\n    expand && subscriber.next(value as any);\n\n    // Increment the number of active subscriptions so we can track it\n    // against our concurrency limit later.\n    active++;\n\n    // A flag used to show that the inner observable completed.\n    // This is checked during finalization to see if we should\n    // move to the next item in the buffer, if there is on.\n    let innerComplete = false;\n\n    // Start our inner subscription.\n    innerFrom(project(value, index++)).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (innerValue) => {\n          // `mergeScan` has additional handling here. For example\n          // taking the inner value and updating state.\n          onBeforeNext?.(innerValue);\n\n          if (expand) {\n            // If we're expanding, then just recurse back to our outer\n            // handler. It will emit the value first thing.\n            outerNext(innerValue as any);\n          } else {\n            // Otherwise, emit the inner value.\n            subscriber.next(innerValue);\n          }\n        },\n        () => {\n          // Flag that we have completed, so we know to check the buffer\n          // during finalization.\n          innerComplete = true;\n        },\n        // Errors are passed to the destination.\n        undefined,\n        () => {\n          // During finalization, if the inner completed (it wasn't errored or\n          // cancelled), then we want to try the next item in the buffer if\n          // there is one.\n          if (innerComplete) {\n            // We have to wrap this in a try/catch because it happens during\n            // finalization, possibly asynchronously, and we want to pass\n            // any errors that happen (like in a projection function) to\n            // the outer Subscriber.\n            try {\n              // INNER SOURCE COMPLETE\n              // Decrement the active count to ensure that the next time\n              // we try to call `doInnerSub`, the number is accurate.\n              active--;\n              // If we have more values in the buffer, try to process those\n              // Note that this call will increment `active` ahead of the\n              // next conditional, if there were any more inner subscriptions\n              // to start.\n              while (buffer.length && active < concurrent) {\n                const bufferedValue = buffer.shift()!;\n                // Particularly for `expand`, we need to check to see if a scheduler was provided\n                // for when we want to start our inner subscription. Otherwise, we just start\n                // are next inner subscription.\n                if (innerSubScheduler) {\n                  executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                } else {\n                  doInnerSub(bufferedValue);\n                }\n              }\n              // Check to see if we can complete, and complete if so.\n              checkComplete();\n            } catch (err) {\n              subscriber.error(err);\n            }\n          }\n        }\n      )\n    );\n  };\n\n  // Subscribe to our source observable.\n  source.subscribe(\n    createOperatorSubscriber(subscriber, outerNext, () => {\n      // Outer completed, make a note of it, and check to see if we can complete everything.\n      isComplete = true;\n      checkComplete();\n    })\n  );\n\n  // Additional finalization (for when the destination is torn down).\n  // Other finalization is added implicitly via subscription above.\n  return () => {\n    additionalFinalizer?.();\n  };\n}\n","export function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {\n    if (delay === void 0) { delay = 0; }\n    if (repeat === void 0) { repeat = false; }\n    var scheduleSubscription = scheduler.schedule(function () {\n        work();\n        if (repeat) {\n            parentSubscription.add(this.schedule(null, delay));\n        }\n        else {\n            this.unsubscribe();\n        }\n    }, delay);\n    parentSubscription.add(scheduleSubscription);\n    if (!repeat) {\n        return scheduleSubscription;\n    }\n}\n//# sourceMappingURL=executeSchedule.js.map","import { Subscription } from '../Subscription';\nimport { SchedulerAction, SchedulerLike } from '../types';\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay: number,\n  repeat: true\n): void;\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay?: number,\n  repeat?: false\n): Subscription;\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay = 0,\n  repeat = false\n): Subscription | void {\n  const scheduleSubscription = scheduler.schedule(function (this: SchedulerAction<any>) {\n    work();\n    if (repeat) {\n      parentSubscription.add(this.schedule(null, delay));\n    } else {\n      this.unsubscribe();\n    }\n  }, delay);\n\n  parentSubscription.add(scheduleSubscription);\n\n  if (!repeat) {\n    // Because user-land scheduler implementations are unlikely to properly reuse\n    // Actions for repeat scheduling, we can't trust that the returned subscription\n    // will control repeat subscription scenarios. So we're trying to avoid using them\n    // incorrectly within this library.\n    return scheduleSubscription;\n  }\n}\n","import { __read, __spreadArray } from \"tslib\";\nimport { map } from \"../operators/map\";\nvar isArray = Array.isArray;\nfunction callOrApply(fn, args) {\n    return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);\n}\nexport function mapOneOrManyArgs(fn) {\n    return map(function (args) { return callOrApply(fn, args); });\n}\n//# sourceMappingURL=mapOneOrManyArgs.js.map","import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}","import { concat } from '../observable/concat';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\nexport function startWith() {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        values[_i] = arguments[_i];\n    }\n    var scheduler = popScheduler(values);\n    return operate(function (source, subscriber) {\n        (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=startWith.js.map","import { concat } from '../observable/concat';\nimport { OperatorFunction, SchedulerLike, ValueFromArray } from '../types';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function startWith<T>(value: null): OperatorFunction<T, T | null>;\nexport function startWith<T>(value: undefined): OperatorFunction<T, T | undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function startWith<T, A extends readonly unknown[] = T[]>(\n  ...valuesAndScheduler: [...A, SchedulerLike]\n): OperatorFunction<T, T | ValueFromArray<A>>;\nexport function startWith<T, A extends readonly unknown[] = T[]>(...values: A): OperatorFunction<T, T | ValueFromArray<A>>;\n\n/**\n * Returns an observable that, at the moment of subscription, will synchronously emit all\n * values provided to this operator, then subscribe to the source and mirror all of its emissions\n * to subscribers.\n *\n * This is a useful way to know when subscription has occurred on an existing observable.\n *\n * <span class=\"informal\">First emits its arguments in order, and then any\n * emissions from the source.</span>\n *\n * ![](startWith.png)\n *\n * ## Examples\n *\n * Emit a value when a timer starts.\n *\n * ```ts\n * import { timer, map, startWith } from 'rxjs';\n *\n * timer(1000)\n *   .pipe(\n *     map(() => 'timer emit'),\n *     startWith('timer start')\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // results:\n * // 'timer start'\n * // 'timer emit'\n * ```\n *\n * @param values Items you want the modified Observable to emit first.\n * @return A function that returns an Observable that synchronously emits\n * provided values before subscribing to the source Observable.\n *\n * @see {@link endWith}\n * @see {@link finalize}\n * @see {@link concat}\n */\nexport function startWith<T, D>(...values: D[]): OperatorFunction<T, T | D> {\n  const scheduler = popScheduler(values);\n  return operate((source, subscriber) => {\n    // Here we can't pass `undefined` as a scheduler, because if we did, the\n    // code inside of `concat` would be confused by the `undefined`, and treat it\n    // like an invalid observable. So we have to split it two different ways.\n    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n  });\n}\n","import { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\nexport function concat() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return concatAll()(from(args, popScheduler(args)));\n}\n//# sourceMappingURL=concat.js.map","import { Observable } from '../Observable';\nimport { ObservableInputTuple, SchedulerLike } from '../types';\nimport { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function concat<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function concat<T extends readonly unknown[]>(\n  ...inputsAndScheduler: [...ObservableInputTuple<T>, SchedulerLike]\n): Observable<T[number]>;\n\n/**\n * Creates an output Observable which sequentially emits all values from the first given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n *\n * Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n *\n * ```ts\n * import { interval, take, range, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * Concatenate 3 Observables\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const result = concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * Concatenate the same Observable to repeat it\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(2));\n *\n * concat(timer, timer) // concatenating the same Observable!\n *   .subscribe({\n *     next: value => console.log(value),\n *     complete: () => console.log('...and it is done!')\n *   });\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // '...and it is done!' also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link startWith}\n * @see {@link endWith}\n *\n * @param args Input Observables to concatenate.\n */\nexport function concat(...args: any[]): Observable<unknown> {\n  return concatAll()(from(args, popScheduler(args)));\n}\n","import { mergeAll } from './mergeAll';\nexport function concatAll() {\n    return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map","import { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * ![](concatAll.svg)\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, map, interval, take, concatAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(4)))\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaustAll}\n * @see {@link mergeAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @return A function that returns an Observable emitting values from all the\n * inner Observables concatenated.\n */\nexport function concatAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeAll(1);\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Infinity; }\n    return mergeMap(identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n *\n * ```ts\n * import { fromEvent, map, interval, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map(() => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n *\n * ```ts\n * import { fromEvent, map, interval, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(10)))\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link exhaustAll}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Infinity] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits values coming from\n * all the inner Observables emitted by the source Observable.\n */\nexport function mergeAll<O extends ObservableInput<any>>(concurrent: number = Infinity): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeMap(identity, concurrent);\n}\n","import { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\nfunction last(arr) {\n    return arr[arr.length - 1];\n}\nexport function popResultSelector(args) {\n    return isFunction(last(args)) ? args.pop() : undefined;\n}\nexport function popScheduler(args) {\n    return isScheduler(last(args)) ? args.pop() : undefined;\n}\nexport function popNumber(args, defaultValue) {\n    return typeof last(args) === 'number' ? args.pop() : defaultValue;\n}\n//# sourceMappingURL=args.js.map","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\n\nfunction last<T>(arr: T[]): T | undefined {\n  return arr[arr.length - 1];\n}\n\nexport function popResultSelector(args: any[]): ((...args: unknown[]) => unknown) | undefined {\n  return isFunction(last(args)) ? args.pop() : undefined;\n}\n\nexport function popScheduler(args: any[]): SchedulerLike | undefined {\n  return isScheduler(last(args)) ? args.pop() : undefined;\n}\n\nexport function popNumber(args: any[], defaultValue: number): number {\n  return typeof last(args) === 'number' ? args.pop()! : defaultValue;\n}\n","import { isFunction } from './isFunction';\nexport function isScheduler(value) {\n    return value && isFunction(value.schedule);\n}\n//# sourceMappingURL=isScheduler.js.map","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && isFunction(value.schedule);\n}\n","import { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\nexport function from(input, scheduler) {\n    return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n//# sourceMappingURL=from.js.map","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\n\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike | undefined): Observable<ObservedValueOf<O>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n *\n * Converts an array to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10\n * // 20\n * // 30\n * ```\n *\n * Convert an infinite iterable (from a generator) to an Observable\n *\n * ```ts\n * import { from, take } from 'rxjs';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3\n * // 6\n * // 12\n * // 24\n * // 48\n * // 96\n * // 192\n * // 384\n * // 768\n * // 1536\n * ```\n *\n * With `asyncScheduler`\n *\n * ```ts\n * import { from, asyncScheduler } from 'rxjs';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, asyncScheduler);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // 'start'\n * // 'end'\n * // 10\n * // 20\n * // 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n */\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        if (isAsyncIterable(input)) {\n            return scheduleAsyncIterable(input, scheduler);\n        }\n        if (isIterable(input)) {\n            return scheduleIterable(input, scheduler);\n        }\n        if (isReadableStreamLike(input)) {\n            return scheduleReadableStreamLike(input, scheduler);\n        }\n    }\n    throw createInvalidObservableTypeError(input);\n}\n//# sourceMappingURL=scheduled.js.map","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function scheduleObservable(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n//# sourceMappingURL=scheduleObservable.js.map","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { InteropObservable, SchedulerLike } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return operate(function (source, subscriber) {\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));\n    });\n}\n//# sourceMappingURL=observeOn.js.map","/** @prettier */\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n *\n * Ensure values in subscribe are called just before browser repaint\n *\n * ```ts\n * import { interval, observeOn, animationFrameScheduler } from 'rxjs';\n *\n * const someDiv = document.createElement('div');\n * someDiv.style.cssText = 'width: 200px;background: #09c';\n * document.body.appendChild(someDiv);\n * const intervals = interval(10);      // Intervals are scheduled\n *                                      // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler) // ...but we will observe on animationFrame\n * )                                    // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param delay Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return A function that returns an Observable that emits the same\n * notifications as the source Observable, but with provided scheduler.\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay),\n        () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay),\n        (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)\n      )\n    );\n  });\n}\n","import { operate } from '../util/lift';\nexport function subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return operate(function (source, subscriber) {\n        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));\n    });\n}\n//# sourceMappingURL=subscribeOn.js.map","import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n *\n * With `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\n *\n * Schedulers control the speed and order of emissions to observers from an Observable stream.\n *\n * ![](subscribeOn.png)\n *\n * ## Example\n *\n * Given the following code:\n *\n * ```ts\n * import { of, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3);\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 1\n * // 2\n * // 3\n * // 4\n * // 5\n * // 6\n * ```\n *\n * Both Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\n *\n * If we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emitted by Observable `a`:\n *\n * ```ts\n * import { of, subscribeOn, asyncScheduler, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 4\n * // 5\n * // 6\n * // 1\n * // 2\n * // 3\n * ```\n *\n * The reason for this is that Observable `b` emits its values directly and synchronously like before\n * but the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\n *\n * @param scheduler The {@link SchedulerLike} to perform subscription actions on.\n * @param delay A delay to pass to the scheduler to delay subscriptions\n * @return A function that returns an Observable modified so that its\n * subscriptions happen on the specified {@link SchedulerLike}.\n */\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n  });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nexport function schedulePromise(input, scheduler) {\n    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n//# sourceMappingURL=schedulePromise.js.map","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { SchedulerLike } from '../types';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nexport function scheduleArray(input, scheduler) {\n    return new Observable(function (subscriber) {\n        var i = 0;\n        return scheduler.schedule(function () {\n            if (i === input.length) {\n                subscriber.complete();\n            }\n            else {\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    this.schedule();\n                }\n            }\n        });\n    });\n}\n//# sourceMappingURL=scheduleArray.js.map","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    // The current array index.\n    let i = 0;\n    // Start iterating over the array like on a schedule.\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        // If we have hit the end of the array like in the\n        // previous job, we can complete.\n        subscriber.complete();\n      } else {\n        // Otherwise let's next the value at the current index,\n        // then increment our index.\n        subscriber.next(input[i++]);\n        // If the last emission didn't cause us to close the subscriber\n        // (via take or some side effect), reschedule the job and we'll\n        // make another pass.\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n","import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n    return new Observable(function (subscriber) {\n        var iterator;\n        executeSchedule(subscriber, scheduler, function () {\n            iterator = input[Symbol_iterator]();\n            executeSchedule(subscriber, scheduler, function () {\n                var _a;\n                var value;\n                var done;\n                try {\n                    (_a = iterator.next(), value = _a.value, done = _a.done);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                }\n            }, 0, true);\n        });\n        return function () { return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };\n    });\n}\n//# sourceMappingURL=scheduleIterable.js.map","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    executeSchedule(subscriber, scheduler, () => {\n      // Create the iterator.\n      iterator = (input as any)[Symbol_iterator]();\n\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          let value: T;\n          let done: boolean | undefined;\n          try {\n            // Pull the value out of the iterator\n            ({ value, done } = iterator.next());\n          } catch (err) {\n            // We got an error while pulling from the iterator\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n          }\n        },\n        0,\n        true\n      );\n    });\n\n    // During finalization, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n","import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable(function (subscriber) {\n        executeSchedule(subscriber, scheduler, function () {\n            var iterator = input[Symbol.asyncIterator]();\n            executeSchedule(subscriber, scheduler, function () {\n                iterator.next().then(function (result) {\n                    if (result.done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(result.value);\n                    }\n                });\n            }, 0, true);\n        });\n    });\n}\n//# sourceMappingURL=scheduleAsyncIterable.js.map","import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport function scheduleAsyncIterable<T>(input: AsyncIterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>((subscriber) => {\n    executeSchedule(subscriber, scheduler, () => {\n      const iterator = input[Symbol.asyncIterator]();\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          iterator.next().then((result) => {\n            if (result.done) {\n              // This will remove the subscriptions from\n              // the parent subscription.\n              subscriber.complete();\n            } else {\n              subscriber.next(result.value);\n            }\n          });\n        },\n        0,\n        true\n      );\n    });\n  });\n}\n","import { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nexport function scheduleReadableStreamLike(input, scheduler) {\n    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n//# sourceMappingURL=scheduleReadableStreamLike.js.map","import { SchedulerLike, ReadableStreamLike } from '../types';\nimport { Observable } from '../Observable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\n\nexport function scheduleReadableStreamLike<T>(input: ReadableStreamLike<T>, scheduler: SchedulerLike): Observable<T> {\n  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { __read, __spreadArray } from \"tslib\";\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { identity } from '../util/identity';\nimport { noop } from '../util/noop';\nimport { popResultSelector } from '../util/args';\nexport function withLatestFrom() {\n    var inputs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        inputs[_i] = arguments[_i];\n    }\n    var project = popResultSelector(inputs);\n    return operate(function (source, subscriber) {\n        var len = inputs.length;\n        var otherValues = new Array(len);\n        var hasValue = inputs.map(function () { return false; });\n        var ready = false;\n        var _loop_1 = function (i) {\n            innerFrom(inputs[i]).subscribe(createOperatorSubscriber(subscriber, function (value) {\n                otherValues[i] = value;\n                if (!ready && !hasValue[i]) {\n                    hasValue[i] = true;\n                    (ready = hasValue.every(identity)) && (hasValue = null);\n                }\n            }, noop));\n        };\n        for (var i = 0; i < len; i++) {\n            _loop_1(i);\n        }\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            if (ready) {\n                var values = __spreadArray([value], __read(otherValues));\n                subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);\n            }\n        }));\n    });\n}\n//# sourceMappingURL=withLatestFrom.js.map","import { OperatorFunction, ObservableInputTuple } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { identity } from '../util/identity';\nimport { noop } from '../util/noop';\nimport { popResultSelector } from '../util/args';\n\nexport function withLatestFrom<T, O extends unknown[]>(...inputs: [...ObservableInputTuple<O>]): OperatorFunction<T, [T, ...O]>;\n\nexport function withLatestFrom<T, O extends unknown[], R>(\n  ...inputs: [...ObservableInputTuple<O>, (...value: [T, ...O]) => R]\n): OperatorFunction<T, R>;\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * ![](withLatestFrom.png)\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * ## Example\n *\n * On every click event, emit an array with the latest timer event plus the click event\n *\n * ```ts\n * import { fromEvent, interval, withLatestFrom } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const result = clicks.pipe(withLatestFrom(timer));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.pipe(withLatestFrom(b, c), map(([a1, b1, c1]) => a1 + b1 + c1))`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return A function that returns an Observable of projected values from the\n * most recent values from each input Observable, or an array of the most\n * recent values from each input Observable.\n */\nexport function withLatestFrom<T, R>(...inputs: any[]): OperatorFunction<T, R | any[]> {\n  const project = popResultSelector(inputs) as ((...args: any[]) => R) | undefined;\n\n  return operate((source, subscriber) => {\n    const len = inputs.length;\n    const otherValues = new Array(len);\n    // An array of whether or not the other sources have emitted. Matched with them by index.\n    // TODO: At somepoint, we should investigate the performance implications here, and look\n    // into using a `Set()` and checking the `size` to see if we're ready.\n    let hasValue = inputs.map(() => false);\n    // Flipped true when we have at least one value from all other sources and\n    // we are ready to start emitting values.\n    let ready = false;\n\n    // Other sources. Note that here we are not checking `subscriber.closed`,\n    // this causes all inputs to be subscribed to, even if nothing can be emitted\n    // from them. This is an important distinction because subscription constitutes\n    // a side-effect.\n    for (let i = 0; i < len; i++) {\n      innerFrom(inputs[i]).subscribe(\n        createOperatorSubscriber(\n          subscriber,\n          (value) => {\n            otherValues[i] = value;\n            if (!ready && !hasValue[i]) {\n              // If we're not ready yet, flag to show this observable has emitted.\n              hasValue[i] = true;\n              // Intentionally terse code.\n              // If all of our other observables have emitted, set `ready` to `true`,\n              // so we know we can start emitting values, then clean up the `hasValue` array,\n              // because we don't need it anymore.\n              (ready = hasValue.every(identity)) && (hasValue = null!);\n            }\n          },\n          // Completing one of the other sources has\n          // no bearing on the completion of our result.\n          noop\n        )\n      );\n    }\n\n    // Source subscription\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        if (ready) {\n          // We have at least one value from the other sources. Go ahead and emit.\n          const values = [value, ...otherValues];\n          subscriber.next(project ? project(...values) : values);\n        }\n      })\n    );\n  });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n    return operate(function (source, subscriber) {\n        var innerSubscriber = null;\n        var index = 0;\n        var isComplete = false;\n        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n            var innerIndex = 0;\n            var outerIndex = index++;\n            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {\n                innerSubscriber = null;\n                checkComplete();\n            })));\n        }, function () {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n//# sourceMappingURL=switchMap.js.map","import { Subscriber } from '../Subscriber';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switchAll}.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n *\n * Generate new Observable according to source Observable values\n *\n * ```ts\n * import { of, switchMap } from 'rxjs';\n *\n * const switched = of(1, 2, 3).pipe(switchMap(x => of(x, x ** 2, x ** 3)));\n * switched.subscribe(x => console.log(x));\n * // outputs\n * // 1\n * // 1\n * // 1\n * // 2\n * // 4\n * // 8\n * // 3\n * // 9\n * // 27\n * ```\n *\n * Restart an interval Observable on every click event\n *\n * ```ts\n * import { fromEvent, switchMap, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap(() => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * only the values from the most recently projected inner Observable.\n */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return operate((source, subscriber) => {\n    let innerSubscriber: Subscriber<ObservedValueOf<O>> | null = null;\n    let index = 0;\n    // Whether or not the source subscription has completed\n    let isComplete = false;\n\n    // We only complete the result if the source is complete AND we don't have an active inner subscription.\n    // This is called both when the source completes and when the inners complete.\n    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Cancel the previous inner subscription if there was one\n          innerSubscriber?.unsubscribe();\n          let innerIndex = 0;\n          const outerIndex = index++;\n          // Start the next inner subscription\n          innerFrom(project(value, outerIndex)).subscribe(\n            (innerSubscriber = createOperatorSubscriber(\n              subscriber,\n              // When we get a new inner value, next it through. Note that this is\n              // handling the deprecate result selector here. This is because with this architecture\n              // it ends up being smaller than using the map operator.\n              (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue),\n              () => {\n                // The inner has completed. Null out the inner subscriber to\n                // free up memory and to signal that we have no inner subscription\n                // currently.\n                innerSubscriber = null!;\n                checkComplete();\n              }\n            ))\n          );\n        },\n        () => {\n          isComplete = true;\n          checkComplete();\n        }\n      )\n    );\n  });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate(function (source, subscriber) {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, function () { return subscriber.complete(); }, noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=takeUntil.js.map","import { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n *\n * Tick every second until the first click happens\n *\n * ```ts\n * import { interval, fromEvent, takeUntil } from 'rxjs';\n *\n * const source = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = source.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return A function that returns an Observable that emits the values from the\n * source Observable until `notifier` emits its first value.\n */\nexport function takeUntil<T>(notifier: ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n    !subscriber.closed && source.subscribe(subscriber);\n  });\n}\n"],"names":["$5c96a02c592fcff1$var$extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","$5c96a02c592fcff1$export$a8ba968b8961cb8a","TypeError","String","__","constructor","create","$5c96a02c592fcff1$export$67ebef60e6f28a6","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","Symbol","iterator","n","v","step","op","done","value","pop","length","push","e","$5c96a02c592fcff1$export$19a8beecd37a4c45","o","s","m","i","$5c96a02c592fcff1$export$8d051b38c9118094","r","ar","error","$5c96a02c592fcff1$export$1216008129fb82ed","to","from","pack","arguments","l","slice","concat","$5c96a02c592fcff1$export$10c90e4f7922046c","$8821cb8787de9fb5$export$1e2f57719e155213","x","$c1aa42b0603892d6$export$f6e2535fb5126e54","$9dcf7896928e75dd$export$4369c812aac99591","then","$f587043ffd615a90$export$c9648b76fd580c34","createImpl","ctorFunc","instance","Error","stack","_super","errors","message","map","err","toString","join","name","$2b94c03d07e501cc$export$dae3f38077fc36c0","arr","item","index","indexOf","splice","$8343668acd7c4a9b$export$f55210826850c514","empty","Subscription","initialTeardown","closed","_parentage","_finalizers","unsubscribe","e_1","_a","e_2","_b","isArray","_parentage_1","_parentage_1_1","parent_1","remove","e_1_1","return","initialFinalizer","_finalizers_1","_finalizers_1_1","finalizer","$8343668acd7c4a9b$var$execFinalizer","e_2_1","add","teardown","_hasParent","_addParent","parent","includes","_removeParent","EMPTY","$8343668acd7c4a9b$export$4f9221cbada3c4fc","$ca336efb1b4fb564$export$e506a1d27d1eaa20","onUnhandledError","onStoppedNotification","Promise","undefined","useDeprecatedSynchronousErrorHandling","useDeprecatedNextContext","$c07b5bfa3b9d4401$export$365aa6bd3c788e3d","setTimeout","handler","timeout","args","_i","delegate","apply","clearTimeout","handle","$18eb28ff53cc4943$export$ebf645db02d3e99f","$528e75db69787807$export$8793edee2d425525","$0ba077a4cdfd9739$export$b7f97edb34bc1f87","$0ba077a4cdfd9739$export$9c8f6e8d39c60cf3","kind","$92213d3dd6a83b5d$var$context","$cf8ce74b80455e9f$export$60959659b2c22881","Subscriber","destination","_this","isStopped","$cf8ce74b80455e9f$export$88d395d20619a0af","complete","$cf8ce74b80455e9f$export$94eeb6a328cab6c7","$cf8ce74b80455e9f$var$handleStoppedNotification","_next","_error","_complete","$cf8ce74b80455e9f$var$_bind","Function","bind","$cf8ce74b80455e9f$var$bind","fn","$cf8ce74b80455e9f$var$ConsumerObserver","ConsumerObserver","partialObserver","$cf8ce74b80455e9f$var$handleUnhandledError","SafeSubscriber","observerOrNext","context_1","errorThrown","notification","subscriber","$eaf29fccbded6ed3$export$5ab46cbf6120b33a","observable","$7569c528cdd9d182$export$f0954fd7d5368655","$4f562137a990678a$export$77cea355fa80b5f4","Observable","subscribe","_subscribe","lift","operator","source","$4f562137a990678a$var$isSubscriber","$4f562137a990678a$var$isObserver","cb","isRoot","_trySubscribe","sink","forEach","promiseCtor","$4f562137a990678a$var$getPromiseCtor","resolve","reject","pipe","operations","fns","input","reduce","prev","toPromise","$7c74d6a5e2273447$export$edb10ab8dd75a915","obj","asyncIterator","$d63b3f5b704e6de4$export$7cbe71b9fa263484","$0b89b4d4fb8bd3fd$export$6f58e2338da23f4d","$b8a13650b96f19ab$export$9652023d9040757","$54b99b9095e84ce4$export$cf4785e597badab3","readableStream","_arguments","generator","q","a","resume","fulfill","settle","shift","reader","getReader","read","releaseLock","$54b99b9095e84ce4$export$c088ffafdba7405f","$1dc2e2cd8f7c5351$export$6a9cfa3ebc765910","obs","array","promise","$1dc2e2cd8f7c5351$export$e073fccf36d78cc1","iterable_1","iterable_1_1","asyncIterable","$1dc2e2cd8f7c5351$var$process","asyncIterable_1","asyncIterable_1_1","P","fulfilled","rejected","result","adopt","catch","$992c4a42843eb1d0$export$871731df685d7753","init","liftedSource","$3868f035248205c1$export$b9e075132cc6937f","onNext","onComplete","onError","onFinalize","$3868f035248205c1$export$8fbbf0c4d80268e5","OperatorSubscriber","shouldUnsubscribe","closed_1","$9853a79d111e4e33$export$871de8747c9eaa88","project","$3525e15e439f8b93$export$a2b7447487315232","parentSubscription","scheduler","work","delay","repeat","scheduleSubscription","schedule","$46964ba1b403cbfc$export$6b9f6c0d32c093f9","resultSelector","concurrent","Infinity","ii","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","active","isComplete","checkComplete","outerNext","doInnerSub","innerComplete","innerValue","_loop_1","bufferedValue","$e6cd63efe08c02de$var$isArray","$f65a851e0b190f66$var$nodeEventEmitterMethods","$f65a851e0b190f66$var$eventTargetMethods","$f65a851e0b190f66$var$jqueryMethods","$f65a851e0b190f66$export$a36e16046ae8f1bb","target","eventName","options","$f65a851e0b190f66$var$isEventTarget","addEventListener","removeEventListener","methodName","$f65a851e0b190f66$var$isNodeStyleEventEmitter","addListener","removeListener","$f65a851e0b190f66$var$toCommonHandlerRegistry","$f65a851e0b190f66$var$isJQueryStyleEventEmitter","on","off","subTarget","$3b29c258456d9a89$var$last","$3b29c258456d9a89$export$29534b2f653ae592","$25136415cad576bc$export$9007f49c319d1ac7","$daf4fd612cb884aa$export$1eb44d8f5f64733b","$d2627b52a3f1ff1b$export$7c7f0979b56a32f3","$82eda875fdd470db$export$ee1b3e54f0441b22","$b4e14b6b8da86996$var$root","document","getElementById","$b4e14b6b8da86996$var$slider","createElement","classList","$b4e14b6b8da86996$var$pin","append","$b4e14b6b8da86996$var$createNotches","notches","notch","$b4e14b6b8da86996$var$createDragNDrop","resize$","window","values","offset$","offsetLeft","width$","clientWidth","mousedown$","mousemove$","mouseup$","drag$","innerSubscriber","innerIndex","outerIndex","inputs","len","otherValues","hasValue","ready","every","offset","width","position","clientX","notchCount","results","Math","round","max","min","pos","console","log","style","transform"],"version":3,"file":"index.ba2fa3db.js.map"}